{"ast":null,"code":"import _slicedToArray from \"C:/Users/imarusic/Desktop/project/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"C:/Users/imarusic/Desktop/project/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/imarusic/Desktop/project/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"C:/Users/imarusic/Desktop/project/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/imarusic/Desktop/project/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { SecurityContext, ɵɵdefineInjectable, ɵɵinject, ErrorHandler, Injectable, Optional, Inject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Returns an exception to be thrown in the case when attempting to\r\n * load an icon with a name that cannot be found.\r\n * @docs-private\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(\"Unable to find icon with the name \\\"\".concat(iconName, \"\\\"\"));\n}\n/**\r\n * Returns an exception to be thrown when the consumer attempts to use\r\n * `<mat-icon>` without including @angular/common/http.\r\n * @docs-private\r\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\r\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\n * @param url URL that was attempted to be sanitized.\r\n * @docs-private\r\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(\"The URL provided to MatIconRegistry was not trusted as a resource URL \" + \"via Angular's DomSanitizer. Attempted URL was \\\"\".concat(url, \"\\\".\"));\n}\n/**\r\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\r\n * @param literal HTML that was attempted to be sanitized.\r\n * @docs-private\r\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(\"The literal provided to MatIconRegistry was not trusted as safe HTML by \" + \"Angular's DomSanitizer. Attempted literal was \\\"\".concat(literal, \"\\\".\"));\n}\n/**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * @docs-private\r\n */\n\n\nvar SvgIconConfig = function SvgIconConfig(data, options) {\n  _classCallCheck(this, SvgIconConfig);\n\n  this.options = options; // Note that we can't use `instanceof SVGElement` here,\n  // because it'll break during server-side rendering.\n\n  if (!!data.nodeName) {\n    this.svgElement = data;\n  } else {\n    this.url = data;\n  }\n};\n/**\r\n * Service to register and display icons used by the `<mat-icon>` component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\n\n\nvar MatIconRegistry =\n/** @class */\nfunction () {\n  var MatIconRegistry = /*#__PURE__*/function () {\n    function MatIconRegistry(_httpClient, _sanitizer, document, _errorHandler) {\n      _classCallCheck(this, MatIconRegistry);\n\n      this._httpClient = _httpClient;\n      this._sanitizer = _sanitizer;\n      this._errorHandler = _errorHandler;\n      /**\r\n       * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n       */\n\n      this._svgIconConfigs = new Map();\n      /**\r\n       * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n       * Multiple icon sets can be registered under the same namespace.\r\n       */\n\n      this._iconSetConfigs = new Map();\n      /** Cache for icons loaded by direct URLs. */\n\n      this._cachedIconsByUrl = new Map();\n      /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n\n      this._inProgressUrlFetches = new Map();\n      /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n\n      this._fontCssClassesByAlias = new Map();\n      /**\r\n       * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\r\n       * The default 'material-icons' value assumes that the material icon font has been loaded as\r\n       * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\r\n       */\n\n      this._defaultFontSetClass = 'material-icons';\n      this._document = document;\n    }\n    /**\r\n     * Registers an icon by URL in the default namespace.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param url\r\n     */\n\n\n    _createClass(MatIconRegistry, [{\n      key: \"addSvgIcon\",\n      value: function addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n      }\n      /**\r\n       * Registers an icon using an HTML string in the default namespace.\r\n       * @param iconName Name under which the icon should be registered.\r\n       * @param literal SVG source of the icon.\r\n       */\n\n    }, {\n      key: \"addSvgIconLiteral\",\n      value: function addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n      }\n      /**\r\n       * Registers an icon by URL in the specified namespace.\r\n       * @param namespace Namespace in which the icon should be registered.\r\n       * @param iconName Name under which the icon should be registered.\r\n       * @param url\r\n       */\n\n    }, {\n      key: \"addSvgIconInNamespace\",\n      value: function addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n      }\n      /**\r\n       * Registers an icon using an HTML string in the specified namespace.\r\n       * @param namespace Namespace in which the icon should be registered.\r\n       * @param iconName Name under which the icon should be registered.\r\n       * @param literal SVG source of the icon.\r\n       */\n\n    }, {\n      key: \"addSvgIconLiteralInNamespace\",\n      value: function addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        var sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n        if (!sanitizedLiteral) {\n          throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n\n        var svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n      }\n      /**\r\n       * Registers an icon set by URL in the default namespace.\r\n       * @param url\r\n       */\n\n    }, {\n      key: \"addSvgIconSet\",\n      value: function addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n      }\n      /**\r\n       * Registers an icon set using an HTML string in the default namespace.\r\n       * @param literal SVG source of the icon set.\r\n       */\n\n    }, {\n      key: \"addSvgIconSetLiteral\",\n      value: function addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n      }\n      /**\r\n       * Registers an icon set by URL in the specified namespace.\r\n       * @param namespace Namespace in which to register the icon set.\r\n       * @param url\r\n       */\n\n    }, {\n      key: \"addSvgIconSetInNamespace\",\n      value: function addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n      }\n      /**\r\n       * Registers an icon set using an HTML string in the specified namespace.\r\n       * @param namespace Namespace in which to register the icon set.\r\n       * @param literal SVG source of the icon set.\r\n       */\n\n    }, {\n      key: \"addSvgIconSetLiteralInNamespace\",\n      value: function addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        var sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n        if (!sanitizedLiteral) {\n          throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n\n        var svgElement = this._svgElementFromString(sanitizedLiteral);\n\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n      }\n      /**\r\n       * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\r\n       * component with the alias as the fontSet input will cause the class name to be applied\r\n       * to the `<mat-icon>` element.\r\n       *\r\n       * @param alias Alias for the font.\r\n       * @param className Class name override to be used instead of the alias.\r\n       */\n\n    }, {\n      key: \"registerFontClassAlias\",\n      value: function registerFontClassAlias(alias) {\n        var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : alias;\n\n        this._fontCssClassesByAlias.set(alias, className);\n\n        return this;\n      }\n      /**\r\n       * Returns the CSS class name associated with the alias by a previous call to\r\n       * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n       */\n\n    }, {\n      key: \"classNameForFontAlias\",\n      value: function classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n      }\n      /**\r\n       * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n       * have a fontSet input value, and is not loading an icon by name or URL.\r\n       *\r\n       * @param className\r\n       */\n\n    }, {\n      key: \"setDefaultFontSetClass\",\n      value: function setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n      }\n      /**\r\n       * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n       * have a fontSet input value, and is not loading an icon by name or URL.\r\n       */\n\n    }, {\n      key: \"getDefaultFontSetClass\",\n      value: function getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n      }\n      /**\r\n       * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n       * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n       * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n       * it will not contain any modifications made to elements previously returned).\r\n       *\r\n       * @param safeUrl URL from which to fetch the SVG icon.\r\n       */\n\n    }, {\n      key: \"getSvgIconFromUrl\",\n      value: function getSvgIconFromUrl(safeUrl) {\n        var _this = this;\n\n        var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n        if (!url) {\n          throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n\n        var cachedIcon = this._cachedIconsByUrl.get(url);\n\n        if (cachedIcon) {\n          return of(cloneSvg(cachedIcon));\n        }\n\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(function (svg) {\n          return _this._cachedIconsByUrl.set(url, svg);\n        }), map(function (svg) {\n          return cloneSvg(svg);\n        }));\n      }\n      /**\r\n       * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n       * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n       * if not, the Observable will throw an error.\r\n       *\r\n       * @param name Name of the icon to be retrieved.\r\n       * @param namespace Namespace in which to look for the icon.\r\n       */\n\n    }, {\n      key: \"getNamedSvgIcon\",\n      value: function getNamedSvgIcon(name) {\n        var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        // Return (copy of) cached icon if possible.\n        var key = iconKey(namespace, name);\n\n        var config = this._svgIconConfigs.get(key);\n\n        if (config) {\n          return this._getSvgFromConfig(config);\n        } // See if we have any icon sets registered for the namespace.\n\n\n        var iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n        if (iconSetConfigs) {\n          return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n\n        return throwError(getMatIconNameNotFoundError(key));\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._svgIconConfigs.clear();\n\n        this._iconSetConfigs.clear();\n\n        this._cachedIconsByUrl.clear();\n      }\n      /**\r\n       * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n       */\n\n    }, {\n      key: \"_getSvgFromConfig\",\n      value: function _getSvgFromConfig(config) {\n        if (config.svgElement) {\n          // We already have the SVG element for this icon, return a copy.\n          return of(cloneSvg(config.svgElement));\n        } else {\n          // Fetch the icon from the config's URL, cache it, and return a copy.\n          return this._loadSvgIconFromConfig(config).pipe(tap(function (svg) {\n            return config.svgElement = svg;\n          }), map(function (svg) {\n            return cloneSvg(svg);\n          }));\n        }\n      }\n      /**\r\n       * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n       * First searches the available cached icons for a nested element with a matching name, and\r\n       * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n       * that have not been cached, and searches again after all fetches are completed.\r\n       * The returned Observable produces the SVG element if possible, and throws\r\n       * an error if no icon with the specified name can be found.\r\n       */\n\n    }, {\n      key: \"_getSvgFromIconSetConfigs\",\n      value: function _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        var _this2 = this;\n\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n        if (namedIcon) {\n          // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n          // time anyway, there's probably not much advantage compared to just always extracting\n          // it from the icon set.\n          return of(namedIcon);\n        } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n\n\n        var iconSetFetchRequests = iconSetConfigs.filter(function (iconSetConfig) {\n          return !iconSetConfig.svgElement;\n        }).map(function (iconSetConfig) {\n          return _this2._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(function (err) {\n            var url = _this2._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n\n\n            var errorMessage = \"Loading icon set URL: \".concat(url, \" failed: \").concat(err.message);\n\n            _this2._errorHandler.handleError(new Error(errorMessage));\n\n            return of(null);\n          }));\n        }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n\n        return forkJoin(iconSetFetchRequests).pipe(map(function () {\n          var foundIcon = _this2._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n          if (!foundIcon) {\n            throw getMatIconNameNotFoundError(name);\n          }\n\n          return foundIcon;\n        }));\n      }\n      /**\r\n       * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n       * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n       * returns it. Returns null if no matching element is found.\r\n       */\n\n    }, {\n      key: \"_extractIconWithNameFromAnySet\",\n      value: function _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (var i = iconSetConfigs.length - 1; i >= 0; i--) {\n          var config = iconSetConfigs[i];\n\n          if (config.svgElement) {\n            var foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n\n            if (foundIcon) {\n              return foundIcon;\n            }\n          }\n        }\n\n        return null;\n      }\n      /**\r\n       * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n       * from it.\r\n       */\n\n    }, {\n      key: \"_loadSvgIconFromConfig\",\n      value: function _loadSvgIconFromConfig(config) {\n        var _this3 = this;\n\n        return this._fetchIcon(config).pipe(map(function (svgText) {\n          return _this3._createSvgElementForSingleIcon(svgText, config.options);\n        }));\n      }\n      /**\r\n       * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\r\n       * from it.\r\n       */\n\n    }, {\n      key: \"_loadSvgIconSetFromConfig\",\n      value: function _loadSvgIconSetFromConfig(config) {\n        var _this4 = this;\n\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n          return of(config.svgElement);\n        }\n\n        return this._fetchIcon(config).pipe(map(function (svgText) {\n          // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n          // only needs to occur if the cache is yet unset.\n          if (!config.svgElement) {\n            config.svgElement = _this4._svgElementFromString(svgText);\n          }\n\n          return config.svgElement;\n        }));\n      }\n      /**\r\n       * Creates a DOM element from the given SVG string, and adds default attributes.\r\n       */\n\n    }, {\n      key: \"_createSvgElementForSingleIcon\",\n      value: function _createSvgElementForSingleIcon(responseText, options) {\n        var svg = this._svgElementFromString(responseText);\n\n        this._setSvgAttributes(svg, options);\n\n        return svg;\n      }\n      /**\r\n       * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n       * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n       * returns it. Returns null if no matching element is found.\r\n       */\n\n    }, {\n      key: \"_extractSvgIconFromSet\",\n      value: function _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        var iconSource = iconSet.querySelector(\"[id=\\\"\".concat(iconName, \"\\\"]\"));\n\n        if (!iconSource) {\n          return null;\n        } // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n\n\n        var iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n          return this._setSvgAttributes(iconElement, options);\n        } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n          return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        } // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n\n\n        var svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n      }\n      /**\r\n       * Creates a DOM element from the given SVG string.\r\n       */\n\n    }, {\n      key: \"_svgElementFromString\",\n      value: function _svgElementFromString(str) {\n        var div = this._document.createElement('DIV');\n\n        div.innerHTML = str;\n        var svg = div.querySelector('svg');\n\n        if (!svg) {\n          throw Error('<svg> tag not found');\n        }\n\n        return svg;\n      }\n      /**\r\n       * Converts an element into an SVG node by cloning all of its children.\r\n       */\n\n    }, {\n      key: \"_toSvgElement\",\n      value: function _toSvgElement(element) {\n        var svg = this._svgElementFromString('<svg></svg>');\n\n        var attributes = element.attributes; // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n\n        for (var i = 0; i < attributes.length; i++) {\n          var _attributes$i = attributes[i],\n              name = _attributes$i.name,\n              value = _attributes$i.value;\n\n          if (name !== 'id') {\n            svg.setAttribute(name, value);\n          }\n        }\n\n        for (var _i = 0; _i < element.childNodes.length; _i++) {\n          if (element.childNodes[_i].nodeType === this._document.ELEMENT_NODE) {\n            svg.appendChild(element.childNodes[_i].cloneNode(true));\n          }\n        }\n\n        return svg;\n      }\n      /**\r\n       * Sets the default attributes for an SVG element to be used as an icon.\r\n       */\n\n    }, {\n      key: \"_setSvgAttributes\",\n      value: function _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n        if (options && options.viewBox) {\n          svg.setAttribute('viewBox', options.viewBox);\n        }\n\n        return svg;\n      }\n      /**\r\n       * Returns an Observable which produces the string contents of the given icon. Results may be\r\n       * cached, so future calls with the same URL may not cause another HTTP request.\r\n       */\n\n    }, {\n      key: \"_fetchIcon\",\n      value: function _fetchIcon(iconConfig) {\n        var _this5 = this;\n\n        var _a;\n\n        var safeUrl = iconConfig.url,\n            options = iconConfig.options;\n        var withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n\n        if (!this._httpClient) {\n          throw getMatIconNoHttpProviderError();\n        }\n\n        if (safeUrl == null) {\n          throw Error(\"Cannot fetch icon from URL \\\"\".concat(safeUrl, \"\\\".\"));\n        }\n\n        var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n        if (!url) {\n          throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n\n\n        var inProgressFetch = this._inProgressUrlFetches.get(url);\n\n        if (inProgressFetch) {\n          return inProgressFetch;\n        } // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n\n\n        var req = this._httpClient.get(url, {\n          responseType: 'text',\n          withCredentials: withCredentials\n        }).pipe(finalize(function () {\n          return _this5._inProgressUrlFetches.delete(url);\n        }), share());\n\n        this._inProgressUrlFetches.set(url, req);\n\n        return req;\n      }\n      /**\r\n       * Registers an icon config by name in the specified namespace.\r\n       * @param namespace Namespace in which to register the icon config.\r\n       * @param iconName Name under which to register the config.\r\n       * @param config Config to be registered.\r\n       */\n\n    }, {\n      key: \"_addSvgIconConfig\",\n      value: function _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n        return this;\n      }\n      /**\r\n       * Registers an icon set config in the specified namespace.\r\n       * @param namespace Namespace in which to register the icon config.\r\n       * @param config Config to be registered.\r\n       */\n\n    }, {\n      key: \"_addSvgIconSetConfig\",\n      value: function _addSvgIconSetConfig(namespace, config) {\n        var configNamespace = this._iconSetConfigs.get(namespace);\n\n        if (configNamespace) {\n          configNamespace.push(config);\n        } else {\n          this._iconSetConfigs.set(namespace, [config]);\n        }\n\n        return this;\n      }\n    }]);\n\n    return MatIconRegistry;\n  }();\n\n  MatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n    return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler));\n  };\n\n  MatIconRegistry.ɵprov = ɵɵdefineInjectable({\n    factory: function MatIconRegistry_Factory() {\n      return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler));\n    },\n    token: MatIconRegistry,\n    providedIn: \"root\"\n  });\n\n  MatIconRegistry.ctorParameters = function () {\n    return [{\n      type: HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ErrorHandler\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc1.HttpClient,\n        decorators: [{\n          type: Optional\n        }]\n      }, {\n        type: ɵngcc2.DomSanitizer\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [DOCUMENT]\n        }]\n      }, {\n        type: ɵngcc0.ErrorHandler\n      }];\n    }, null);\n  })();\n\n  return MatIconRegistry;\n}();\n/** @docs-private */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\n\n\nvar ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, ErrorHandler, [new Optional(), DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/** Clones an SVGElement while preserving type information. */\n\nfunction cloneSvg(svg) {\n  return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// Boilerplate for applying mixins to MatIcon.\n\n/** @docs-private */\n\n\nvar MatIconBase = function MatIconBase(_elementRef) {\n  _classCallCheck(this, MatIconBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatIconMixinBase = mixinColor(MatIconBase);\n/**\r\n * Injection token used to provide the current location to `MatIcon`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n * @docs-private\r\n */\n\n\nvar MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  var _document = inject(DOCUMENT);\n\n  var _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: function getPathname() {\n      return _location ? _location.pathname + _location.search : '';\n    }\n  };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\n\n\nvar funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nvar ɵ0 = function ɵ0(attr) {\n  return \"[\".concat(attr, \"]\");\n};\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\n\n\nvar funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\n\nvar funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\r\n * Component to display an icon. It can be used in the following ways:\r\n *\r\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r\n *   Examples:\r\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\r\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\r\n *\r\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\r\n *   component. By default the Material icons font is used as described at\r\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\r\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\r\n *   Examples:\r\n *     `<mat-icon>home</mat-icon>\r\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\r\n *\r\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\r\n *   https://fortawesome.github.io/Font-Awesome/examples/\r\n *   Example:\r\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\r\n */\n\nvar MatIcon =\n/** @class */\nfunction () {\n  var MatIcon = /*#__PURE__*/function (_MatIconMixinBase2) {\n    _inherits(MatIcon, _MatIconMixinBase2);\n\n    var _super = _createSuper(MatIcon);\n\n    function MatIcon(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n      var _this6;\n\n      _classCallCheck(this, MatIcon);\n\n      _this6 = _super.call(this, elementRef);\n      _this6._iconRegistry = _iconRegistry;\n      _this6._location = _location;\n      _this6._errorHandler = _errorHandler;\n      _this6._inline = false;\n      /** Subscription to the current in-progress SVG icon request. */\n\n      _this6._currentIconFetch = Subscription.EMPTY; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n      // the right thing to do for the majority of icon use-cases.\n\n      if (!ariaHidden) {\n        elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n      }\n\n      return _this6;\n    }\n    /**\r\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\r\n     * the element the icon is contained in.\r\n     */\n\n\n    _createClass(MatIcon, [{\n      key: \"_splitIconName\",\n\n      /**\r\n       * Splits an svgIcon binding value into its icon set and icon name components.\r\n       * Returns a 2-element array of [(icon set), (icon name)].\r\n       * The separator for the two fields is ':'. If there is no separator, an empty\r\n       * string is returned for the icon set and the entire value is returned for\r\n       * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n       * Throws an error if the name contains two or more ':' separators.\r\n       * Examples:\r\n       *   `'social:cake' -> ['social', 'cake']\r\n       *   'penguin' -> ['', 'penguin']\r\n       *   null -> ['', '']\r\n       *   'a:b:c' -> (throws Error)`\r\n       */\n      value: function _splitIconName(iconName) {\n        if (!iconName) {\n          return ['', ''];\n        }\n\n        var parts = iconName.split(':');\n\n        switch (parts.length) {\n          case 1:\n            return ['', parts[0]];\n          // Use default namespace.\n\n          case 2:\n            return parts;\n\n          default:\n            throw Error(\"Invalid icon name: \\\"\".concat(iconName, \"\\\"\"));\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var _this7 = this;\n\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        var svgIconChanges = changes['svgIcon'];\n\n        if (svgIconChanges) {\n          this._currentIconFetch.unsubscribe();\n\n          if (this.svgIcon) {\n            var _this$_splitIconName = this._splitIconName(this.svgIcon),\n                _this$_splitIconName2 = _slicedToArray(_this$_splitIconName, 2),\n                namespace = _this$_splitIconName2[0],\n                iconName = _this$_splitIconName2[1];\n\n            this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(function (svg) {\n              return _this7._setSvgElement(svg);\n            }, function (err) {\n              var errorMessage = \"Error retrieving icon \".concat(namespace, \":\").concat(iconName, \"! \").concat(err.message);\n\n              _this7._errorHandler.handleError(new Error(errorMessage));\n            });\n          } else if (svgIconChanges.previousValue) {\n            this._clearSvgElement();\n          }\n        }\n\n        if (this._usingFontIcon()) {\n          this._updateFontIconClasses();\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n          this._updateFontIconClasses();\n        }\n      }\n    }, {\n      key: \"ngAfterViewChecked\",\n      value: function ngAfterViewChecked() {\n        var cachedElements = this._elementsWithExternalReferences;\n\n        if (cachedElements && cachedElements.size) {\n          var newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n          // the browser doesn't have an API that will let us react on link clicks and\n          // we can't depend on the Angular router. The references need to be updated,\n          // because while most browsers don't care whether the URL is correct after\n          // the first render, Safari will break if the user navigates to a different\n          // page and the SVG isn't re-rendered.\n\n\n          if (newPath !== this._previousPath) {\n            this._previousPath = newPath;\n\n            this._prependPathToReferences(newPath);\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n\n        if (this._elementsWithExternalReferences) {\n          this._elementsWithExternalReferences.clear();\n        }\n      }\n    }, {\n      key: \"_usingFontIcon\",\n      value: function _usingFontIcon() {\n        return !this.svgIcon;\n      }\n    }, {\n      key: \"_setSvgElement\",\n      value: function _setSvgElement(svg) {\n        this._clearSvgElement(); // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n\n\n        var styleTags = svg.querySelectorAll('style');\n\n        for (var i = 0; i < styleTags.length; i++) {\n          styleTags[i].textContent += ' ';\n        } // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n\n\n        var path = this._location.getPathname();\n\n        this._previousPath = path;\n\n        this._cacheChildrenWithExternalReferences(svg);\n\n        this._prependPathToReferences(path);\n\n        this._elementRef.nativeElement.appendChild(svg);\n      }\n    }, {\n      key: \"_clearSvgElement\",\n      value: function _clearSvgElement() {\n        var layoutElement = this._elementRef.nativeElement;\n        var childCount = layoutElement.childNodes.length;\n\n        if (this._elementsWithExternalReferences) {\n          this._elementsWithExternalReferences.clear();\n        } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n        while (childCount--) {\n          var child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n          // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n          if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n            layoutElement.removeChild(child);\n          }\n        }\n      }\n    }, {\n      key: \"_updateFontIconClasses\",\n      value: function _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n          return;\n        }\n\n        var elem = this._elementRef.nativeElement;\n        var fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n        if (fontSetClass != this._previousFontSetClass) {\n          if (this._previousFontSetClass) {\n            elem.classList.remove(this._previousFontSetClass);\n          }\n\n          if (fontSetClass) {\n            elem.classList.add(fontSetClass);\n          }\n\n          this._previousFontSetClass = fontSetClass;\n        }\n\n        if (this.fontIcon != this._previousFontIconClass) {\n          if (this._previousFontIconClass) {\n            elem.classList.remove(this._previousFontIconClass);\n          }\n\n          if (this.fontIcon) {\n            elem.classList.add(this.fontIcon);\n          }\n\n          this._previousFontIconClass = this.fontIcon;\n        }\n      }\n      /**\r\n       * Cleans up a value to be used as a fontIcon or fontSet.\r\n       * Since the value ends up being assigned as a CSS class, we\r\n       * have to trim the value and omit space-separated values.\r\n       */\n\n    }, {\n      key: \"_cleanupFontValue\",\n      value: function _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n      }\n      /**\r\n       * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\r\n       * reference. This is required because WebKit browsers require references to be prefixed with\r\n       * the current path, if the page has a `base` tag.\r\n       */\n\n    }, {\n      key: \"_prependPathToReferences\",\n      value: function _prependPathToReferences(path) {\n        var elements = this._elementsWithExternalReferences;\n\n        if (elements) {\n          elements.forEach(function (attrs, element) {\n            attrs.forEach(function (attr) {\n              element.setAttribute(attr.name, \"url('\".concat(path, \"#\").concat(attr.value, \"')\"));\n            });\n          });\n        }\n      }\n      /**\r\n       * Caches the children of an SVG element that have `url()`\r\n       * references that we need to prefix with the current path.\r\n       */\n\n    }, {\n      key: \"_cacheChildrenWithExternalReferences\",\n      value: function _cacheChildrenWithExternalReferences(element) {\n        var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        var elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n        var _loop = function _loop(i) {\n          funcIriAttributes.forEach(function (attr) {\n            var elementWithReference = elementsWithFuncIri[i];\n            var value = elementWithReference.getAttribute(attr);\n            var match = value ? value.match(funcIriPattern) : null;\n\n            if (match) {\n              var attributes = elements.get(elementWithReference);\n\n              if (!attributes) {\n                attributes = [];\n                elements.set(elementWithReference, attributes);\n              }\n\n              attributes.push({\n                name: attr,\n                value: match[1]\n              });\n            }\n          });\n        };\n\n        for (var i = 0; i < elementsWithFuncIri.length; i++) {\n          _loop(i);\n        }\n      }\n    }, {\n      key: \"inline\",\n      get: function get() {\n        return this._inline;\n      },\n      set: function set(inline) {\n        this._inline = coerceBooleanProperty(inline);\n      }\n      /** Font set that the icon is a part of. */\n\n    }, {\n      key: \"fontSet\",\n      get: function get() {\n        return this._fontSet;\n      },\n      set: function set(value) {\n        this._fontSet = this._cleanupFontValue(value);\n      }\n      /** Name of an icon within a font set. */\n\n    }, {\n      key: \"fontIcon\",\n      get: function get() {\n        return this._fontIcon;\n      },\n      set: function set(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n      }\n    }]);\n\n    return MatIcon;\n  }(_MatIconMixinBase);\n\n  MatIcon.ɵfac = function MatIcon_Factory(t) {\n    return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler));\n  };\n\n  MatIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: MatIcon,\n    selectors: [[\"mat-icon\"]],\n    hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n    hostVars: 4,\n    hostBindings: function MatIcon_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n      }\n    },\n    inputs: {\n      color: \"color\",\n      inline: \"inline\",\n      fontSet: \"fontSet\",\n      fontIcon: \"fontIcon\",\n      svgIcon: \"svgIcon\"\n    },\n    exportAs: [\"matIcon\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  MatIcon.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: MatIconRegistry\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['aria-hidden']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_ICON_LOCATION]\n      }]\n    }, {\n      type: ErrorHandler\n    }];\n  };\n\n  MatIcon.propDecorators = {\n    inline: [{\n      type: Input\n    }],\n    svgIcon: [{\n      type: Input\n    }],\n    fontSet: [{\n      type: Input\n    }],\n    fontIcon: [{\n      type: Input\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n      type: Component,\n      args: [{\n        template: '<ng-content></ng-content>',\n        selector: 'mat-icon',\n        exportAs: 'matIcon',\n        inputs: ['color'],\n        host: {\n          'role': 'img',\n          'class': 'mat-icon notranslate',\n          '[class.mat-icon-inline]': 'inline',\n          '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n        },\n        encapsulation: ViewEncapsulation.None,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: MatIconRegistry\n      }, {\n        type: String,\n        decorators: [{\n          type: Attribute,\n          args: ['aria-hidden']\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [MAT_ICON_LOCATION]\n        }]\n      }, {\n        type: ɵngcc0.ErrorHandler\n      }];\n    }, {\n      inline: [{\n        type: Input\n      }],\n      fontSet: [{\n        type: Input\n      }],\n      fontIcon: [{\n        type: Input\n      }],\n      svgIcon: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return MatIcon;\n}();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar MatIconModule =\n/** @class */\nfunction () {\n  var MatIconModule = function MatIconModule() {\n    _classCallCheck(this, MatIconModule);\n  };\n\n  MatIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: MatIconModule\n  });\n  MatIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function MatIconModule_Factory(t) {\n      return new (t || MatIconModule)();\n    },\n    imports: [[MatCommonModule], MatCommonModule]\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n      declarations: function declarations() {\n        return [MatIcon];\n      },\n      imports: function imports() {\n        return [MatCommonModule];\n      },\n      exports: function exports() {\n        return [MatIcon, MatCommonModule];\n      }\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n      type: NgModule,\n      args: [{\n        imports: [MatCommonModule],\n        exports: [MatIcon, MatCommonModule],\n        declarations: [MatIcon]\n      }]\n    }], null, null);\n  })();\n\n  return MatIconModule;\n}();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };","map":{"version":3,"sources":["../../../../../../src/material/icon/icon-registry.ts","../../../../../../src/material/icon/icon.ts","../../../../../../src/material/icon/icon-module.ts","../../../../../../src/material/icon/public-api.ts","../../../../../../src/material/icon/index.ts"],"names":["observableOf","observableThrow"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n\n  /** Whether or not to fetch the icon or icon set using HTTP credentials. */\n  withCredentials?: boolean;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl, options?: IconOptions);\n  constructor(svgElement: SVGElement, options?: IconOptions);\n  constructor(data: SafeResourceUrl | SVGElement, public options?: IconOptions) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    private readonly _errorHandler: ErrorHandler) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            this._errorHandler.handleError(new Error(errorMessage));\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchIcon(config)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchIcon(config).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string, options?: IconOptions): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString('<svg></svg>');\n    const attributes = element.attributes;\n\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {name, value} = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given icon. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchIcon(iconConfig: SvgIconConfig): Observable<string> {\n    const {url: safeUrl, options} = iconConfig;\n    const withCredentials = options?.withCredentials ?? false;\n\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text', withCredentials}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  errorHandler: ErrorHandler,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    ErrorHandler,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ErrorHandler,\n  inject,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  /** Subscription to the current in-progress SVG icon request. */\n  private _currentIconFetch = Subscription.EMPTY;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>, private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      @Inject(MAT_ICON_LOCATION) private _location: MatIconLocation,\n      private readonly _errorHandler: ErrorHandler) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      this._currentIconFetch.unsubscribe();\n\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n            .pipe(take(1))\n            .subscribe(svg => this._setSvgElement(svg), (err: Error) => {\n              const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n              this._errorHandler.handleError(new Error(errorMessage));\n            });\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._currentIconFetch.unsubscribe();\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    const path = this._location.getPathname();\n    this._previousPath = path;\n    this._cacheChildrenWithExternalReferences(svg);\n    this._prependPathToReferences(path);\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n\n  static ngAcceptInputType_inline: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './icon-module';\nexport * from './icon';\nexport * from './icon-registry';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}