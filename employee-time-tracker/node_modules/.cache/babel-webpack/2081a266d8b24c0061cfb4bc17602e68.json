{"ast":null,"code":"import _createClass from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nvar MatDialogConfig = function MatDialogConfig() {\n  _classCallCheck(this, MatDialogConfig);\n\n  /** The ARIA role of the dialog element. */\n  this.role = 'dialog';\n  /** Custom class for the overlay pane. */\n\n  this.panelClass = '';\n  /** Whether the dialog has a backdrop. */\n\n  this.hasBackdrop = true;\n  /** Custom class for the backdrop. */\n\n  this.backdropClass = '';\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n  this.disableClose = false;\n  /** Width of the dialog. */\n\n  this.width = '';\n  /** Height of the dialog. */\n\n  this.height = '';\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n  this.maxWidth = '80vw';\n  /** Data being injected into the child component. */\n\n  this.data = null;\n  /** ID of the element that describes the dialog. */\n\n  this.ariaDescribedBy = null;\n  /** ID of the element that labels the dialog. */\n\n  this.ariaLabelledBy = null;\n  /** Aria label to assign to the dialog element. */\n\n  this.ariaLabel = null;\n  /** Whether the dialog should focus the first focusable element on open. */\n\n  this.autoFocus = true;\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n\n  this.restoreFocus = true;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\n\nvar matDialogAnimations = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), state('enter', style({\n    transform: 'none'\n  })), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'none',\n    opacity: 1\n  }))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nvar MatDialogContainer =\n/** @class */\nfunction () {\n  var MatDialogContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n    _inherits(MatDialogContainer, _BasePortalOutlet);\n\n    var _super = _createSuper(MatDialogContainer);\n\n    function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document,\n    /** The dialog configuration. */\n    _config) {\n      var _this;\n\n      _classCallCheck(this, MatDialogContainer);\n\n      _this = _super.call(this);\n      _this._elementRef = _elementRef;\n      _this._focusTrapFactory = _focusTrapFactory;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._config = _config;\n      /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n      _this._elementFocusedBeforeDialogWasOpened = null;\n      /** State of the dialog animation. */\n\n      _this._state = 'enter';\n      /** Emits when an animation state changes. */\n\n      _this._animationStateChanged = new EventEmitter();\n      /**\n       * Attaches a DOM portal to the dialog container.\n       * @param portal Portal to be attached.\n       * @deprecated To be turned into a method.\n       * @breaking-change 10.0.0\n       */\n\n      _this.attachDomPortal = function (portal) {\n        if (_this._portalOutlet.hasAttached()) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        _this._setupFocusTrap();\n\n        return _this._portalOutlet.attachDomPortal(portal);\n      };\n\n      _this._ariaLabelledBy = _config.ariaLabelledBy || null;\n      _this._document = _document;\n      return _this;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n\n    _createClass(MatDialogContainer, [{\n      key: \"attachComponentPortal\",\n      value: function attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        this._setupFocusTrap();\n\n        return this._portalOutlet.attachComponentPortal(portal);\n      }\n      /**\n       * Attach a TemplatePortal as content to this dialog container.\n       * @param portal Portal to be attached as the dialog content.\n       */\n\n    }, {\n      key: \"attachTemplatePortal\",\n      value: function attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        this._setupFocusTrap();\n\n        return this._portalOutlet.attachTemplatePortal(portal);\n      }\n      /** Moves focus back into the dialog if it was moved out. */\n\n    }, {\n      key: \"_recaptureFocus\",\n      value: function _recaptureFocus() {\n        if (!this._containsFocus()) {\n          var focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n\n          if (focusContainer) {\n            this._elementRef.nativeElement.focus();\n          }\n        }\n      }\n      /** Moves the focus inside the focus trap. */\n\n    }, {\n      key: \"_trapFocus\",\n      value: function _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n          this._focusTrap.focusInitialElementWhenReady();\n        } else if (!this._containsFocus()) {\n          // Otherwise ensure that focus is on the dialog container. It's possible that a different\n          // component tried to move focus while the open animation was running. See:\n          // https://github.com/angular/components/issues/16215. Note that we only want to do this\n          // if the focus isn't inside the dialog already, because it's possible that the consumer\n          // turned off `autoFocus` in order to move focus themselves.\n          this._elementRef.nativeElement.focus();\n        }\n      }\n      /** Restores focus to the element that was focused before the dialog opened. */\n\n    }, {\n      key: \"_restoreFocus\",\n      value: function _restoreFocus() {\n        var toFocus = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n          var activeElement = this._document.activeElement;\n          var element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n          // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n          // the consumer moved it themselves before the animation was done, in which case we shouldn't\n          // do anything.\n\n          if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n            toFocus.focus();\n          }\n        }\n\n        if (this._focusTrap) {\n          this._focusTrap.destroy();\n        }\n      }\n      /**\n       * Sets up the focus trand and saves a reference to the\n       * element that was focused before the dialog was opened.\n       */\n\n    }, {\n      key: \"_setupFocusTrap\",\n      value: function _setupFocusTrap() {\n        var _this2 = this;\n\n        if (!this._focusTrap) {\n          this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n\n        if (this._document) {\n          this._elementFocusedBeforeDialogWasOpened = this._document.activeElement; // Note that there is no focus method when rendering on the server.\n\n          if (this._elementRef.nativeElement.focus) {\n            // Move focus onto the dialog immediately in order to prevent the user from accidentally\n            // opening multiple dialogs at the same time. Needs to be async, because the element\n            // may not be focusable immediately.\n            Promise.resolve().then(function () {\n              return _this2._elementRef.nativeElement.focus();\n            });\n          }\n        }\n      }\n      /** Returns whether focus is inside the dialog. */\n\n    }, {\n      key: \"_containsFocus\",\n      value: function _containsFocus() {\n        var element = this._elementRef.nativeElement;\n        var activeElement = this._document.activeElement;\n        return element === activeElement || element.contains(activeElement);\n      }\n      /** Callback, invoked whenever an animation on the host completes. */\n\n    }, {\n      key: \"_onAnimationDone\",\n      value: function _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n          this._trapFocus();\n        } else if (event.toState === 'exit') {\n          this._restoreFocus();\n        }\n\n        this._animationStateChanged.emit(event);\n      }\n      /** Callback, invoked when an animation on the host starts. */\n\n    }, {\n      key: \"_onAnimationStart\",\n      value: function _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n      }\n      /** Starts the dialog exit animation. */\n\n    }, {\n      key: \"_startExitAnimation\",\n      value: function _startExitAnimation() {\n        this._state = 'exit'; // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }]);\n\n    return MatDialogContainer;\n  }(BasePortalOutlet);\n\n  MatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n    return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig));\n  };\n\n  MatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: MatDialogContainer,\n    selectors: [[\"mat-dialog-container\"]],\n    viewQuery: function MatDialogContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n    hostVars: 6,\n    hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@dialogContainer\", ctx._state);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    directives: [ɵngcc2.CdkPortalOutlet],\n    styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matDialogAnimations.dialogContainer]\n    }\n  });\n\n  MatDialogContainer.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }];\n  };\n\n  MatDialogContainer.propDecorators = {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n      type: Component,\n      args: [{\n        selector: 'mat-dialog-container',\n        template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n        encapsulation: ViewEncapsulation.None,\n        // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n        // tslint:disable-next-line:validate-decorators\n        changeDetection: ChangeDetectionStrategy.Default,\n        animations: [matDialogAnimations.dialogContainer],\n        host: {\n          'class': 'mat-dialog-container',\n          'tabindex': '-1',\n          'aria-modal': 'true',\n          '[attr.id]': '_id',\n          '[attr.role]': '_config.role',\n          '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n          '[attr.aria-label]': '_config.ariaLabel',\n          '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n          '[@dialogContainer]': '_state',\n          '(@dialogContainer.start)': '_onAnimationStart($event)',\n          '(@dialogContainer.done)': '_onAnimationDone($event)'\n        },\n        styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc1.FocusTrapFactory\n      }, {\n        type: ɵngcc0.ChangeDetectorRef\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [DOCUMENT]\n        }]\n      }, {\n        type: MatDialogConfig\n      }];\n    }, {\n      _portalOutlet: [{\n        type: ViewChild,\n        args: [CdkPortalOutlet, {\n          static: true\n        }]\n      }]\n    });\n  })();\n\n  return MatDialogContainer;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n\n\nvar uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\nvar MatDialogRef = /*#__PURE__*/function () {\n  function MatDialogRef(_overlayRef, _containerInstance) {\n    var _this3 = this;\n\n    var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"mat-dialog-\".concat(uniqueId++);\n\n    _classCallCheck(this, MatDialogRef);\n\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /** Whether the user is allowed to close the dialog. */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* OPEN */\n    ; // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'enter';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'exit';\n    }), take(1)).subscribe(function () {\n      clearTimeout(_this3._closeFallbackTimeout);\n\n      _this3._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(function () {\n      _this3._beforeClosed.next(_this3._result);\n\n      _this3._beforeClosed.complete();\n\n      _this3._afterClosed.next(_this3._result);\n\n      _this3._afterClosed.complete();\n\n      _this3.componentInstance = null;\n\n      _this3._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE && !_this3.disableClose && !hasModifierKey(event);\n    })).subscribe(function (event) {\n      event.preventDefault();\n\n      _this3.close();\n    });\n\n    _overlayRef.backdropClick().subscribe(function () {\n      if (_this3.disableClose) {\n        _this3._containerInstance._recaptureFocus();\n      } else {\n        _this3.close();\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  _createClass(MatDialogRef, [{\n    key: \"close\",\n    value: function close(dialogResult) {\n      var _this4 = this;\n\n      this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n      this._containerInstance._animationStateChanged.pipe(filter(function (event) {\n        return event.phaseName === 'start';\n      }), take(1)).subscribe(function (event) {\n        _this4._beforeClosed.next(dialogResult);\n\n        _this4._beforeClosed.complete();\n\n        _this4._overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n        _this4._closeFallbackTimeout = setTimeout(function () {\n          return _this4._finishDialogClose();\n        }, event.totalTime + 100);\n      });\n\n      this._containerInstance._startExitAnimation();\n\n      this._state = 1\n      /* CLOSING */\n      ;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n\n  }, {\n    key: \"afterClosed\",\n    value: function afterClosed() {\n      return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n\n  }, {\n    key: \"beforeClosed\",\n    value: function beforeClosed() {\n      return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(position) {\n      var strategy = this._getPositionStrategy();\n\n      if (position && (position.left || position.right)) {\n        position.left ? strategy.left(position.left) : strategy.right(position.right);\n      } else {\n        strategy.centerHorizontally();\n      }\n\n      if (position && (position.top || position.bottom)) {\n        position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n      } else {\n        strategy.centerVertically();\n      }\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      this._getPositionStrategy().width(width).height(height);\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      this._overlayRef.addPanelClass(classes);\n\n      return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      this._overlayRef.removePanelClass(classes);\n\n      return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n\n  }, {\n    key: \"_finishDialogClose\",\n    value: function _finishDialogClose() {\n      this._state = 2\n      /* CLOSED */\n      ;\n\n      this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n\n  }, {\n    key: \"_getPositionStrategy\",\n    value: function _getPositionStrategy() {\n      return this._overlayRef.getConfig().positionStrategy;\n    }\n  }]);\n\n  return MatDialogRef;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nvar MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nvar MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nvar MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Service to open Material Design modal dialogs.\n */\n\nvar MatDialog =\n/** @class */\nfunction () {\n  var MatDialog = /*#__PURE__*/function () {\n    function MatDialog(_overlay, _injector,\n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n      var _this5 = this;\n\n      _classCallCheck(this, MatDialog);\n\n      this._overlay = _overlay;\n      this._injector = _injector;\n      this._defaultOptions = _defaultOptions;\n      this._parentDialog = _parentDialog;\n      this._overlayContainer = _overlayContainer;\n      this._openDialogsAtThisLevel = [];\n      this._afterAllClosedAtThisLevel = new Subject();\n      this._afterOpenedAtThisLevel = new Subject();\n      this._ariaHiddenElements = new Map(); // TODO (jelbourn): tighten the typing right-hand side of this expression.\n\n      /**\n       * Stream that emits when all open dialog have finished closing.\n       * Will emit on subscribe if there are no open dialogs to begin with.\n       */\n\n      this.afterAllClosed = defer(function () {\n        return _this5.openDialogs.length ? _this5._afterAllClosed : _this5._afterAllClosed.pipe(startWith(undefined));\n      });\n      this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n\n\n    _createClass(MatDialog, [{\n      key: \"open\",\n\n      /**\n       * Opens a modal dialog containing the given component.\n       * @param componentOrTemplateRef Type of the component to load into the dialog,\n       *     or a TemplateRef to instantiate as the dialog content.\n       * @param config Extra configuration options.\n       * @returns Reference to the newly-opened dialog.\n       */\n      value: function open(componentOrTemplateRef, config) {\n        var _this6 = this;\n\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n        if (config.id && this.getDialogById(config.id)) {\n          throw Error(\"Dialog with id \\\"\".concat(config.id, \"\\\" exists already. The dialog id must be unique.\"));\n        }\n\n        var overlayRef = this._createOverlay(config);\n\n        var dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n        var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n        if (!this.openDialogs.length) {\n          this._hideNonDialogContentFromAssistiveTechnology();\n        }\n\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(function () {\n          return _this6._removeOpenDialog(dialogRef);\n        });\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n      }\n      /**\n       * Closes all of the currently-open dialogs.\n       */\n\n    }, {\n      key: \"closeAll\",\n      value: function closeAll() {\n        this._closeDialogs(this.openDialogs);\n      }\n      /**\n       * Finds an open dialog by its id.\n       * @param id ID to use when looking up the dialog.\n       */\n\n    }, {\n      key: \"getDialogById\",\n      value: function getDialogById(id) {\n        return this.openDialogs.find(function (dialog) {\n          return dialog.id === id;\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n\n        this._afterAllClosedAtThisLevel.complete();\n\n        this._afterOpenedAtThisLevel.complete();\n      }\n      /**\n       * Creates the overlay into which the dialog will be loaded.\n       * @param config The dialog configuration.\n       * @returns A promise resolving to the OverlayRef for the created overlay.\n       */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay(config) {\n        var overlayConfig = this._getOverlayConfig(config);\n\n        return this._overlay.create(overlayConfig);\n      }\n      /**\n       * Creates an overlay config from a dialog config.\n       * @param dialogConfig The dialog configuration.\n       * @returns The overlay configuration.\n       */\n\n    }, {\n      key: \"_getOverlayConfig\",\n      value: function _getOverlayConfig(dialogConfig) {\n        var state = new OverlayConfig({\n          positionStrategy: this._overlay.position().global(),\n          scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n          panelClass: dialogConfig.panelClass,\n          hasBackdrop: dialogConfig.hasBackdrop,\n          direction: dialogConfig.direction,\n          minWidth: dialogConfig.minWidth,\n          minHeight: dialogConfig.minHeight,\n          maxWidth: dialogConfig.maxWidth,\n          maxHeight: dialogConfig.maxHeight,\n          disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n\n        if (dialogConfig.backdropClass) {\n          state.backdropClass = dialogConfig.backdropClass;\n        }\n\n        return state;\n      }\n      /**\n       * Attaches an MatDialogContainer to a dialog's already-created overlay.\n       * @param overlay Reference to the dialog's underlying overlay.\n       * @param config The dialog configuration.\n       * @returns A promise resolving to a ComponentRef for the attached container.\n       */\n\n    }, {\n      key: \"_attachDialogContainer\",\n      value: function _attachDialogContainer(overlay, config) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var injector = Injector.create({\n          parent: userInjector || this._injector,\n          providers: [{\n            provide: MatDialogConfig,\n            useValue: config\n          }]\n        });\n        var containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        var containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n      }\n      /**\n       * Attaches the user-provided component to the already-created MatDialogContainer.\n       * @param componentOrTemplateRef The type of component being loaded into the dialog,\n       *     or a TemplateRef to instantiate as the content.\n       * @param dialogContainer Reference to the wrapping MatDialogContainer.\n       * @param overlayRef Reference to the overlay in which the dialog resides.\n       * @param config The dialog configuration.\n       * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n       */\n\n    }, {\n      key: \"_attachDialogContent\",\n      value: function _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        var dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n          dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n            $implicit: config.data,\n            dialogRef: dialogRef\n          }));\n        } else {\n          var injector = this._createInjector(config, dialogRef, dialogContainer);\n\n          var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n          dialogRef.componentInstance = contentRef.instance;\n        }\n\n        dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n        return dialogRef;\n      }\n      /**\n       * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n       * of a dialog to close itself and, optionally, to return a value.\n       * @param config Config object that is used to construct the dialog.\n       * @param dialogRef Reference to the dialog.\n       * @param container Dialog container element that wraps all of the contents.\n       * @returns The custom injector that can be used inside the dialog.\n       */\n\n    }, {\n      key: \"_createInjector\",\n      value: function _createInjector(config, dialogRef, dialogContainer) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n        // added to the injection tokens.\n\n        var providers = [{\n          provide: MatDialogContainer,\n          useValue: dialogContainer\n        }, {\n          provide: MAT_DIALOG_DATA,\n          useValue: config.data\n        }, {\n          provide: MatDialogRef,\n          useValue: dialogRef\n        }];\n\n        if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n          providers.push({\n            provide: Directionality,\n            useValue: {\n              value: config.direction,\n              change: of()\n            }\n          });\n        }\n\n        return Injector.create({\n          parent: userInjector || this._injector,\n          providers: providers\n        });\n      }\n      /**\n       * Removes a dialog from the array of open dialogs.\n       * @param dialogRef Dialog to be removed.\n       */\n\n    }, {\n      key: \"_removeOpenDialog\",\n      value: function _removeOpenDialog(dialogRef) {\n        var index = this.openDialogs.indexOf(dialogRef);\n\n        if (index > -1) {\n          this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n          // to a the siblings and emit to the `afterAllClosed` stream.\n\n          if (!this.openDialogs.length) {\n            this._ariaHiddenElements.forEach(function (previousValue, element) {\n              if (previousValue) {\n                element.setAttribute('aria-hidden', previousValue);\n              } else {\n                element.removeAttribute('aria-hidden');\n              }\n            });\n\n            this._ariaHiddenElements.clear();\n\n            this._afterAllClosed.next();\n          }\n        }\n      }\n      /**\n       * Hides all of the content that isn't an overlay from assistive technology.\n       */\n\n    }, {\n      key: \"_hideNonDialogContentFromAssistiveTechnology\",\n      value: function _hideNonDialogContentFromAssistiveTechnology() {\n        var overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n        if (overlayContainer.parentElement) {\n          var siblings = overlayContainer.parentElement.children;\n\n          for (var i = siblings.length - 1; i > -1; i--) {\n            var sibling = siblings[i];\n\n            if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n              this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n              sibling.setAttribute('aria-hidden', 'true');\n            }\n          }\n        }\n      }\n      /** Closes all of the dialogs in an array. */\n\n    }, {\n      key: \"_closeDialogs\",\n      value: function _closeDialogs(dialogs) {\n        var i = dialogs.length;\n\n        while (i--) {\n          // The `_openDialogs` property isn't updated after close until the rxjs subscription\n          // runs on the next microtask, in addition to modifying the array as we're going\n          // through it. We loop through all of them and call close without assuming that\n          // they'll be removed from the list instantaneously.\n          dialogs[i].close();\n        }\n      }\n    }, {\n      key: \"openDialogs\",\n      get: function get() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n      }\n      /** Stream that emits when a dialog has been opened. */\n\n    }, {\n      key: \"afterOpened\",\n      get: function get() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n      }\n    }, {\n      key: \"_afterAllClosed\",\n      get: function get() {\n        var parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n      }\n    }]);\n\n    return MatDialog;\n  }();\n\n  MatDialog.ɵfac = function MatDialog_Factory(t) {\n    return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n  };\n\n  MatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: MatDialog,\n    factory: function factory(t) {\n      return MatDialog.ɵfac(t);\n    }\n  });\n\n  MatDialog.ctorParameters = function () {\n    return [{\n      type: Overlay\n    }, {\n      type: Injector\n    }, {\n      type: Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: OverlayContainer\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n      type: Injectable\n    }], function () {\n      return [{\n        type: ɵngcc3.Overlay\n      }, {\n        type: ɵngcc0.Injector\n      }, {\n        type: ɵngcc4.Location,\n        decorators: [{\n          type: Optional\n        }]\n      }, {\n        type: MatDialogConfig,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [MAT_DIALOG_DEFAULT_OPTIONS]\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [MAT_DIALOG_SCROLL_STRATEGY]\n        }]\n      }, {\n        type: MatDialog,\n        decorators: [{\n          type: Optional\n        }, {\n          type: SkipSelf\n        }]\n      }, {\n        type: ɵngcc3.OverlayContainer\n      }];\n    }, null);\n  })();\n\n  return MatDialog;\n}();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign(Object.assign({}, defaultOptions), config);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nvar MatDialogClose =\n/** @class */\nfunction () {\n  var MatDialogClose = /*#__PURE__*/function () {\n    function MatDialogClose(dialogRef, _elementRef, _dialog) {\n      _classCallCheck(this, MatDialogClose);\n\n      this.dialogRef = dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /** Default to \"button\" to prevents accidental form submits. */\n\n      this.type = 'button';\n    }\n\n    _createClass(MatDialogClose, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (!this.dialogRef) {\n          // When this directive is included in a dialog via TemplateRef (rather than being\n          // in a Component), the DialogRef isn't available via injection because embedded\n          // views cannot be given a custom injector. Instead, we look up the DialogRef by\n          // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n          // be resolved at constructor time.\n          this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n        if (proxiedChange) {\n          this.dialogResult = proxiedChange.currentValue;\n        }\n      }\n    }]);\n\n    return MatDialogClose;\n  }();\n\n  MatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n    return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogClose,\n    selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n    hostVars: 2,\n    hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() {\n          return ctx.dialogRef.close(ctx.dialogResult);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n      }\n    },\n    inputs: {\n      type: \"type\",\n      dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n    },\n    exportAs: [\"matDialogClose\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n\n  MatDialogClose.ctorParameters = function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ElementRef\n    }, {\n      type: MatDialog\n    }];\n  };\n\n  MatDialogClose.propDecorators = {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n      type: Directive,\n      args: [{\n        selector: '[mat-dialog-close], [matDialogClose]',\n        exportAs: 'matDialogClose',\n        host: {\n          '(click)': 'dialogRef.close(dialogResult)',\n          '[attr.aria-label]': 'ariaLabel || null',\n          '[attr.type]': 'type'\n        }\n      }]\n    }], function () {\n      return [{\n        type: MatDialogRef,\n        decorators: [{\n          type: Optional\n        }]\n      }, {\n        type: ɵngcc0.ElementRef\n      }, {\n        type: MatDialog\n      }];\n    }, {\n      type: [{\n        type: Input\n      }],\n      dialogResult: [{\n        type: Input,\n        args: ['mat-dialog-close']\n      }],\n      ariaLabel: [{\n        type: Input,\n        args: ['aria-label']\n      }],\n      _matDialogClose: [{\n        type: Input,\n        args: ['matDialogClose']\n      }]\n    });\n  })();\n\n  return MatDialogClose;\n}();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nvar MatDialogTitle =\n/** @class */\nfunction () {\n  var MatDialogTitle = /*#__PURE__*/function () {\n    function MatDialogTitle(_dialogRef, _elementRef, _dialog) {\n      _classCallCheck(this, MatDialogTitle);\n\n      this._dialogRef = _dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      this.id = \"mat-dialog-title-\".concat(dialogElementUid++);\n    }\n\n    _createClass(MatDialogTitle, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this7 = this;\n\n        if (!this._dialogRef) {\n          this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n\n        if (this._dialogRef) {\n          Promise.resolve().then(function () {\n            var container = _this7._dialogRef._containerInstance;\n\n            if (container && !container._ariaLabelledBy) {\n              container._ariaLabelledBy = _this7.id;\n            }\n          });\n        }\n      }\n    }]);\n\n    return MatDialogTitle;\n  }();\n\n  MatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n    return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogTitle,\n    selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-title\"],\n    hostVars: 1,\n    hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    exportAs: [\"matDialogTitle\"]\n  });\n\n  MatDialogTitle.ctorParameters = function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ElementRef\n    }, {\n      type: MatDialog\n    }];\n  };\n\n  MatDialogTitle.propDecorators = {\n    id: [{\n      type: Input\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n      type: Directive,\n      args: [{\n        selector: '[mat-dialog-title], [matDialogTitle]',\n        exportAs: 'matDialogTitle',\n        host: {\n          'class': 'mat-dialog-title',\n          '[id]': 'id'\n        }\n      }]\n    }], function () {\n      return [{\n        type: MatDialogRef,\n        decorators: [{\n          type: Optional\n        }]\n      }, {\n        type: ɵngcc0.ElementRef\n      }, {\n        type: MatDialog\n      }];\n    }, {\n      id: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return MatDialogTitle;\n}();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nvar MatDialogContent =\n/** @class */\nfunction () {\n  var MatDialogContent = function MatDialogContent() {\n    _classCallCheck(this, MatDialogContent);\n  };\n\n  MatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n    return new (t || MatDialogContent)();\n  };\n\n  MatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogContent,\n    selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-content\"]\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n      type: Directive,\n      args: [{\n        selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\n        host: {\n          'class': 'mat-dialog-content'\n        }\n      }]\n    }], null, null);\n  })();\n\n  return MatDialogContent;\n}();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nvar MatDialogActions =\n/** @class */\nfunction () {\n  var MatDialogActions = function MatDialogActions() {\n    _classCallCheck(this, MatDialogActions);\n  };\n\n  MatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n    return new (t || MatDialogActions)();\n  };\n\n  MatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogActions,\n    selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-actions\"]\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n      type: Directive,\n      args: [{\n        selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n        host: {\n          'class': 'mat-dialog-actions'\n        }\n      }]\n    }], null, null);\n  })();\n\n  return MatDialogActions;\n}();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  var parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(function (dialog) {\n    return dialog.id === parent.id;\n  }) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatDialogModule =\n/** @class */\nfunction () {\n  var MatDialogModule = function MatDialogModule() {\n    _classCallCheck(this, MatDialogModule);\n  };\n\n  MatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: MatDialogModule\n  });\n  MatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function MatDialogModule_Factory(t) {\n      return new (t || MatDialogModule)();\n    },\n    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n    imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n      declarations: function declarations() {\n        return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n      },\n      imports: function imports() {\n        return [OverlayModule, PortalModule, MatCommonModule];\n      },\n      exports: function exports() {\n        return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n      }\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n      type: NgModule,\n      args: [{\n        imports: [OverlayModule, PortalModule, MatCommonModule],\n        exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n        declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n        providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n        entryComponents: [MatDialogContainer]\n      }]\n    }], null, null);\n  })();\n\n  return MatDialogModule;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };","map":{"version":3,"sources":["../../../../../../src/material/dialog/dialog-config.ts","../../../../../../src/material/dialog/dialog-animations.ts","../../../../../../src/material/dialog/dialog-container.ts","../../../../../../src/material/dialog/dialog-ref.ts","../../../../../../src/material/dialog/dialog.ts","../../../../../../src/material/dialog/dialog-content-directives.ts","../../../../../../src/material/dialog/dialog-module.ts","../../../../../../src/material/dialog/public-api.ts","../../../../../../src/material/dialog/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, ComponentFactoryResolver} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n  componentFactoryResolver?: ComponentFactoryResolver;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', [\n    // Note: The `enter` animation transitions to `transform: none`, because for some reason\n    // specifying the transform explicitly, causes IE both to blur the dialog content and\n    // decimate the animation performance. Leaving it as `none` solves both issues.\n    state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n    state('enter', style({transform: 'none'})),\n    transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n        style({transform: 'none', opacity: 1}))),\n    transition('* => void, * => exit',\n        animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal,\n  DomPortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  private _document: Document;\n\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n    this._document = _document;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._setupFocusTrap();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._setupFocusTrap();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /**\n   * Attaches a DOM portal to the dialog container.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._setupFocusTrap();\n    return this._portalOutlet.attachDomPortal(portal);\n  }\n\n  /** Moves focus back into the dialog if it was moved out. */\n  _recaptureFocus() {\n    if (!this._containsFocus()) {\n      const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n\n      if (focusContainer) {\n        this._elementRef.nativeElement.focus();\n      }\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else if (!this._containsFocus()) {\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      this._elementRef.nativeElement.focus();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      const activeElement = this._document.activeElement;\n      const element = this._elementRef.nativeElement;\n\n      // Make sure that focus is still inside the dialog or is on the body (usually because a\n      // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n      // the consumer moved it themselves before the animation was done, in which case we shouldn't\n      // do anything.\n      if (!activeElement || activeElement === this._document.body || activeElement === element ||\n        element.contains(activeElement)) {\n        toFocus.focus();\n      }\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Sets up the focus trand and saves a reference to the\n   * element that was focused before the dialog was opened.\n   */\n  private _setupFocusTrap() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Returns whether focus is inside the dialog. */\n  private _containsFocus() {\n    const element = this._elementRef.nativeElement;\n    const activeElement = this._document.activeElement;\n    return element === activeElement || element.contains(activeElement);\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/** Possible states of the lifecycle of a dialog. */\nexport const enum MatDialogState {OPEN, CLOSING, CLOSED}\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  /** Current state of the dialog. */\n  private _state = MatDialogState.OPEN;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n\n    _overlayRef.backdropClick().subscribe(() => {\n      if (this.disableClose) {\n        this._containerInstance._recaptureFocus();\n      } else {\n        this.close();\n      }\n    });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(),\n          event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n    this._state = MatDialogState.CLOSING;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /** Gets the current state of the dialog's lifecycle. */\n  getState(): MatDialogState {\n    return this._state;\n  }\n\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n  private _finishDialogClose() {\n    this._state = MatDialogState.CLOSED;\n    this._overlayRef.dispose();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  StaticProvider,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      /**\n       * @deprecated `_location` parameter to be removed.\n       * @breaking-change 10.0.0\n       */\n      @Optional() _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{provide: MatDialogConfig, useValue: config}]\n    });\n\n    const containerPortal = new ComponentPortal(MatDialogContainer,\n        config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, config.id);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{$implicit: config.data, dialogRef}));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): Injector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const providers: StaticProvider[] = [\n      {provide: MatDialogContainer, useValue: dialogContainer},\n      {provide: MAT_DIALOG_DATA, useValue: config.data},\n      {provide: MatDialogRef, useValue: dialogRef}\n    ];\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      providers.push({\n        provide: Directionality,\n        useValue: {value: config.direction, change: observableOf()}\n      });\n    }\n\n    return Injector.create({parent: userInjector || this._injector, providers});\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './dialog-module';\nexport * from './dialog';\nexport * from './dialog-container';\nexport * from './dialog-content-directives';\nexport * from './dialog-config';\nexport * from './dialog-ref';\nexport * from './dialog-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}