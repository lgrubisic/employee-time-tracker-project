{"ast":null,"code":"import { Observable } from '../Observable';\nexport function range() {\n  var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var count = arguments.length > 1 ? arguments[1] : undefined;\n  var scheduler = arguments.length > 2 ? arguments[2] : undefined;\n  return new Observable(function (subscriber) {\n    if (count === undefined) {\n      count = start;\n      start = 0;\n    }\n\n    var index = 0;\n    var current = start;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index: index,\n        count: count,\n        start: start,\n        subscriber: subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n\n        subscriber.next(current++);\n\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n\n    return undefined;\n  });\n}\nexport function dispatch(state) {\n  var start = state.start,\n      index = state.index,\n      count = state.count,\n      subscriber = state.subscriber;\n\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n\n  subscriber.next(start);\n\n  if (subscriber.closed) {\n    return;\n  }\n\n  state.index = index + 1;\n  state.start = start + 1;\n  this.schedule(state);\n}","map":{"version":3,"sources":["../../../src/internal/observable/range.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,eAA3B;AAoCA,OAAM,SAAU,KAAV,GAEyC;AAAA,MAFzB,KAEyB,uEAFT,CAES;AAAA,MADzB,KACyB;AAAA,MAAzB,SAAyB;AAC7C,SAAO,IAAI,UAAJ,CAAuB,UAAA,UAAU,EAAG;AACzC,QAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,MAAA,KAAK,GAAG,KAAR;AACA,MAAA,KAAK,GAAG,CAAR;AACD;;AAED,QAAI,KAAK,GAAG,CAAZ;AACA,QAAI,OAAO,GAAG,KAAd;;AAEA,QAAI,SAAJ,EAAe;AACb,aAAO,SAAS,CAAC,QAAV,CAAmB,QAAnB,EAA6B,CAA7B,EAAgC;AACrC,QAAA,KAAK,EAAL,KADqC;AAC9B,QAAA,KAAK,EAAL,KAD8B;AACvB,QAAA,KAAK,EAAL,KADuB;AAChB,QAAA,UAAU,EAAV;AADgB,OAAhC,CAAP;AAGD,KAJD,MAIO;AACL,SAAG;AACD,YAAI,KAAK,MAAM,KAAf,EAAsB;AACpB,UAAA,UAAU,CAAC,QAAX;AACA;AACD;;AACD,QAAA,UAAU,CAAC,IAAX,CAAgB,OAAO,EAAvB;;AACA,YAAI,UAAU,CAAC,MAAf,EAAuB;AACrB;AACD;AACF,OATD,QASS,IATT;AAUD;;AAED,WAAO,SAAP;AACD,GA3BM,CAAP;AA4BD;AAGD,OAAM,SAAU,QAAV,CAA+C,KAA/C,EAAyD;AAAA,MACrD,KADqD,GACjB,KADiB,CACrD,KADqD;AAAA,MAC9C,KAD8C,GACjB,KADiB,CAC9C,KAD8C;AAAA,MACvC,KADuC,GACjB,KADiB,CACvC,KADuC;AAAA,MAChC,UADgC,GACjB,KADiB,CAChC,UADgC;;AAG7D,MAAI,KAAK,IAAI,KAAb,EAAoB;AAClB,IAAA,UAAU,CAAC,QAAX;AACA;AACD;;AAED,EAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;;AAEA,MAAI,UAAU,CAAC,MAAf,EAAuB;AACrB;AACD;;AAED,EAAA,KAAK,CAAC,KAAN,GAAc,KAAK,GAAG,CAAtB;AACA,EAAA,KAAK,CAAC,KAAN,GAAc,KAAK,GAAG,CAAtB;AAEA,OAAK,QAAL,CAAc,KAAd;AACD","sourcesContent":["import { Observable } from '../Observable';\r\nexport function range(start = 0, count, scheduler) {\r\n    return new Observable(subscriber => {\r\n        if (count === undefined) {\r\n            count = start;\r\n            start = 0;\r\n        }\r\n        let index = 0;\r\n        let current = start;\r\n        if (scheduler) {\r\n            return scheduler.schedule(dispatch, 0, {\r\n                index, count, start, subscriber\r\n            });\r\n        }\r\n        else {\r\n            do {\r\n                if (index++ >= count) {\r\n                    subscriber.complete();\r\n                    break;\r\n                }\r\n                subscriber.next(current++);\r\n                if (subscriber.closed) {\r\n                    break;\r\n                }\r\n            } while (true);\r\n        }\r\n        return undefined;\r\n    });\r\n}\r\nexport function dispatch(state) {\r\n    const { start, index, count, subscriber } = state;\r\n    if (index >= count) {\r\n        subscriber.complete();\r\n        return;\r\n    }\r\n    subscriber.next(start);\r\n    if (subscriber.closed) {\r\n        return;\r\n    }\r\n    state.index = index + 1;\r\n    state.start = start + 1;\r\n    this.schedule(state);\r\n}\r\n//# sourceMappingURL=range.js.map"]},"metadata":{},"sourceType":"module"}