{"ast":null,"code":"import _get from \"C:/Users/imarusic/Desktop/TimeProject/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/imarusic/Desktop/TimeProject/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/imarusic/Desktop/TimeProject/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/imarusic/Desktop/TimeProject/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/imarusic/Desktop/TimeProject/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/imarusic/Desktop/TimeProject/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nvar RetryWhenOperator = /*#__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    _classCallCheck(this, RetryWhenOperator);\n\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  _createClass(RetryWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n  }]);\n\n  return RetryWhenOperator;\n}();\n\nvar RetryWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(RetryWhenSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(RetryWhenSubscriber);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this;\n\n    _classCallCheck(this, RetryWhenSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n\n  _createClass(RetryWhenSubscriber, [{\n    key: \"error\",\n    value: function error(err) {\n      if (!this.isStopped) {\n        var errors = this.errors;\n        var retries = this.retries;\n        var retriesSubscription = this.retriesSubscription;\n\n        if (!retries) {\n          errors = new Subject();\n\n          try {\n            var notifier = this.notifier;\n            retries = notifier(errors);\n          } catch (e) {\n            return _get(_getPrototypeOf(RetryWhenSubscriber.prototype), \"error\", this).call(this, e);\n          }\n\n          retriesSubscription = subscribeToResult(this, retries);\n        } else {\n          this.errors = null;\n          this.retriesSubscription = null;\n        }\n\n        this._unsubscribeAndRecycle();\n\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        errors.next(err);\n      }\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var errors = this.errors,\n          retriesSubscription = this.retriesSubscription;\n\n      if (errors) {\n        errors.unsubscribe();\n        this.errors = null;\n      }\n\n      if (retriesSubscription) {\n        retriesSubscription.unsubscribe();\n        this.retriesSubscription = null;\n      }\n\n      this.retries = null;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      var _unsubscribe = this._unsubscribe;\n      this._unsubscribe = null;\n\n      this._unsubscribeAndRecycle();\n\n      this._unsubscribe = _unsubscribe;\n      this.source.subscribe(this);\n    }\n  }]);\n\n  return RetryWhenSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/retryWhen.ts"],"names":[],"mappings":";;;;;;AAGA,SAAS,OAAT,QAAwB,YAAxB;AAGA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AAkBA,OAAM,SAAU,SAAV,CAAuB,QAAvB,EAA6E;AACjF,SAAO,UAAC,MAAD;AAAA,WAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAJ,CAAsB,QAAtB,EAAgC,MAAhC,CAAZ,CAA3B;AAAA,GAAP;AACD;;IAEK,iB;AACJ,6BAAsB,QAAtB,EACsB,MADtB,EAC2C;AAAA;;AADrB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACrB;;;;yBAEI,U,EAA2B,M,EAAW;AACzC,aAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,KAAK,QAAzC,EAAmD,KAAK,MAAxD,CAAjB,CAAP;AACD;;;;;;IAQG,mB;;;;;AAMJ,+BAAY,WAAZ,EACoB,QADpB,EAEoB,MAFpB,EAEyC;AAAA;;AAAA;;AACvC,8BAAM,WAAN;AAFkB,UAAA,QAAA,GAAA,QAAA;AACA,UAAA,MAAA,GAAA,MAAA;AAAqB;AAExC;;;;0BAEK,G,EAAQ;AACZ,UAAI,CAAC,KAAK,SAAV,EAAqB;AAEnB,YAAI,MAAM,GAAG,KAAK,MAAlB;AACA,YAAI,OAAO,GAAQ,KAAK,OAAxB;AACA,YAAI,mBAAmB,GAAG,KAAK,mBAA/B;;AAEA,YAAI,CAAC,OAAL,EAAc;AACZ,UAAA,MAAM,GAAG,IAAI,OAAJ,EAAT;;AACA,cAAI;AAAA,gBACM,QADN,GACmB,IADnB,CACM,QADN;AAEF,YAAA,OAAO,GAAG,QAAQ,CAAC,MAAD,CAAlB;AACD,WAHD,CAGE,OAAO,CAAP,EAAU;AACV,kGAAmB,CAAnB;AACD;;AACD,UAAA,mBAAmB,GAAG,iBAAiB,CAAC,IAAD,EAAO,OAAP,CAAvC;AACD,SATD,MASO;AACL,eAAK,MAAL,GAAc,IAAd;AACA,eAAK,mBAAL,GAA2B,IAA3B;AACD;;AAED,aAAK,sBAAL;;AAEA,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,mBAAL,GAA2B,mBAA3B;AAEA,QAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;AACF;;;mCAGW;AAAA,UACF,MADE,GAC8B,IAD9B,CACF,MADE;AAAA,UACM,mBADN,GAC8B,IAD9B,CACM,mBADN;;AAEV,UAAI,MAAJ,EAAY;AACV,QAAA,MAAM,CAAC,WAAP;AACA,aAAK,MAAL,GAAc,IAAd;AACD;;AACD,UAAI,mBAAJ,EAAyB;AACvB,QAAA,mBAAmB,CAAC,WAApB;AACA,aAAK,mBAAL,GAA2B,IAA3B;AACD;;AACD,WAAK,OAAL,GAAe,IAAf;AACD;;;+BAEU,U,EAAe,U,EACf,U,EAAoB,U,EACpB,Q,EAA+B;AAAA,UAChC,YADgC,GACf,IADe,CAChC,YADgC;AAGxC,WAAK,YAAL,GAAoB,IAApB;;AACA,WAAK,sBAAL;;AACA,WAAK,YAAL,GAAoB,YAApB;AAEA,WAAK,MAAL,CAAY,SAAZ,CAAsB,IAAtB;AACD;;;;EAnEqC,e","sourcesContent":["import { Subject } from '../Subject';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nexport function retryWhen(notifier) {\r\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\r\n}\r\nclass RetryWhenOperator {\r\n    constructor(notifier, source) {\r\n        this.notifier = notifier;\r\n        this.source = source;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\r\n    }\r\n}\r\nclass RetryWhenSubscriber extends OuterSubscriber {\r\n    constructor(destination, notifier, source) {\r\n        super(destination);\r\n        this.notifier = notifier;\r\n        this.source = source;\r\n    }\r\n    error(err) {\r\n        if (!this.isStopped) {\r\n            let errors = this.errors;\r\n            let retries = this.retries;\r\n            let retriesSubscription = this.retriesSubscription;\r\n            if (!retries) {\r\n                errors = new Subject();\r\n                try {\r\n                    const { notifier } = this;\r\n                    retries = notifier(errors);\r\n                }\r\n                catch (e) {\r\n                    return super.error(e);\r\n                }\r\n                retriesSubscription = subscribeToResult(this, retries);\r\n            }\r\n            else {\r\n                this.errors = null;\r\n                this.retriesSubscription = null;\r\n            }\r\n            this._unsubscribeAndRecycle();\r\n            this.errors = errors;\r\n            this.retries = retries;\r\n            this.retriesSubscription = retriesSubscription;\r\n            errors.next(err);\r\n        }\r\n    }\r\n    _unsubscribe() {\r\n        const { errors, retriesSubscription } = this;\r\n        if (errors) {\r\n            errors.unsubscribe();\r\n            this.errors = null;\r\n        }\r\n        if (retriesSubscription) {\r\n            retriesSubscription.unsubscribe();\r\n            this.retriesSubscription = null;\r\n        }\r\n        this.retries = null;\r\n    }\r\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        const { _unsubscribe } = this;\r\n        this._unsubscribe = null;\r\n        this._unsubscribeAndRecycle();\r\n        this._unsubscribe = _unsubscribe;\r\n        this.source.subscribe(this);\r\n    }\r\n}\r\n//# sourceMappingURL=retryWhen.js.map"]},"metadata":{},"sourceType":"module"}