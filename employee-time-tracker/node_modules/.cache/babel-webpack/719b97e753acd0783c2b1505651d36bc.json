{"ast":null,"code":"import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_ref) {\n  var _ref$bufferSize = _ref.bufferSize,\n      bufferSize = _ref$bufferSize === void 0 ? Number.POSITIVE_INFINITY : _ref$bufferSize,\n      _ref$windowTime = _ref.windowTime,\n      windowTime = _ref$windowTime === void 0 ? Number.POSITIVE_INFINITY : _ref$windowTime,\n      useRefCount = _ref.refCount,\n      scheduler = _ref.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function next(value) {\n          subject.next(value);\n        },\n        error: function error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/shareReplay.ts"],"names":[],"mappings":"AACA,SAAS,aAAT,QAA8B,kBAA9B;AA2DA,OAAM,SAAU,WAAV,CACJ,kBADI,EAEJ,UAFI,EAGJ,SAHI,EAGqB;AAEzB,MAAI,MAAJ;;AACA,MAAI,kBAAkB,IAAI,OAAO,kBAAP,KAA8B,QAAxD,EAAkE;AAChE,IAAA,MAAM,GAAG,kBAAT;AACD,GAFD,MAEO;AACL,IAAA,MAAM,GAAG;AACP,MAAA,UAAU,EAAE,kBADL;AAEP,MAAA,UAAU,EAAV,UAFO;AAGP,MAAA,QAAQ,EAAE,KAHH;AAIP,MAAA,SAAS,EAAT;AAJO,KAAT;AAMD;;AACD,SAAO,UAAC,MAAD;AAAA,WAA2B,MAAM,CAAC,IAAP,CAAY,mBAAmB,CAAC,MAAD,CAA/B,CAA3B;AAAA,GAAP;AACD;;AAED,SAAS,mBAAT,OAKoB;AAAA,6BAJlB,UAIkB;AAAA,MAJlB,UAIkB,gCAJL,MAAM,CAAC,iBAIF;AAAA,6BAHlB,UAGkB;AAAA,MAHlB,UAGkB,gCAHL,MAAM,CAAC,iBAGF;AAAA,MAFR,WAEQ,QAFlB,QAEkB;AAAA,MADlB,SACkB,QADlB,SACkB;AAClB,MAAI,OAAJ;AACA,MAAI,QAAQ,GAAG,CAAf;AACA,MAAI,YAAJ;AACA,MAAI,QAAQ,GAAG,KAAf;AACA,MAAI,UAAU,GAAG,KAAjB;AAEA,SAAO,SAAS,oBAAT,CAAmD,MAAnD,EAAwE;AAC7E,IAAA,QAAQ;AACR,QAAI,QAAJ;;AACA,QAAI,CAAC,OAAD,IAAY,QAAhB,EAA0B;AACxB,MAAA,QAAQ,GAAG,KAAX;AACA,MAAA,OAAO,GAAG,IAAI,aAAJ,CAAqB,UAArB,EAAiC,UAAjC,EAA6C,SAA7C,CAAV;AACA,MAAA,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAX;AACA,MAAA,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB;AAC9B,QAAA,IAD8B,gBACzB,KADyB,EACpB;AAAI,UAAA,OAAO,CAAC,IAAR,CAAa,KAAb;AAAsB,SADN;AAE9B,QAAA,KAF8B,iBAExB,GAFwB,EAErB;AACP,UAAA,QAAQ,GAAG,IAAX;AACA,UAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACD,SAL6B;AAM9B,QAAA,QAN8B,sBAMtB;AACN,UAAA,UAAU,GAAG,IAAb;AACA,UAAA,YAAY,GAAG,SAAf;AACA,UAAA,OAAO,CAAC,QAAR;AACD;AAV6B,OAAjB,CAAf;AAYD,KAhBD,MAgBO;AACL,MAAA,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAX;AACD;;AAED,SAAK,GAAL,CAAS,YAAK;AACZ,MAAA,QAAQ;AACR,MAAA,QAAQ,CAAC,WAAT;;AACA,UAAI,YAAY,IAAI,CAAC,UAAjB,IAA+B,WAA/B,IAA8C,QAAQ,KAAK,CAA/D,EAAkE;AAChE,QAAA,YAAY,CAAC,WAAb;AACA,QAAA,YAAY,GAAG,SAAf;AACA,QAAA,OAAO,GAAG,SAAV;AACD;AACF,KARD;AASD,GAhCD;AAiCD","sourcesContent":["import { ReplaySubject } from '../ReplaySubject';\r\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\r\n    let config;\r\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\r\n        config = configOrBufferSize;\r\n    }\r\n    else {\r\n        config = {\r\n            bufferSize: configOrBufferSize,\r\n            windowTime,\r\n            refCount: false,\r\n            scheduler\r\n        };\r\n    }\r\n    return (source) => source.lift(shareReplayOperator(config));\r\n}\r\nfunction shareReplayOperator({ bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, refCount: useRefCount, scheduler }) {\r\n    let subject;\r\n    let refCount = 0;\r\n    let subscription;\r\n    let hasError = false;\r\n    let isComplete = false;\r\n    return function shareReplayOperation(source) {\r\n        refCount++;\r\n        let innerSub;\r\n        if (!subject || hasError) {\r\n            hasError = false;\r\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\r\n            innerSub = subject.subscribe(this);\r\n            subscription = source.subscribe({\r\n                next(value) { subject.next(value); },\r\n                error(err) {\r\n                    hasError = true;\r\n                    subject.error(err);\r\n                },\r\n                complete() {\r\n                    isComplete = true;\r\n                    subscription = undefined;\r\n                    subject.complete();\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            innerSub = subject.subscribe(this);\r\n        }\r\n        this.add(() => {\r\n            refCount--;\r\n            innerSub.unsubscribe();\r\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\r\n                subscription.unsubscribe();\r\n                subscription = undefined;\r\n                subject = undefined;\r\n            }\r\n        });\r\n    };\r\n}\r\n//# sourceMappingURL=shareReplay.js.map"]},"metadata":{},"sourceType":"module"}