{"ast":null,"code":"import _classCallCheck from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    var connectable = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\nexport var MulticastOperator = /*#__PURE__*/function () {\n  function MulticastOperator(subjectFactory, selector) {\n    _classCallCheck(this, MulticastOperator);\n\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n\n  _createClass(MulticastOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var selector = this.selector;\n      var subject = this.subjectFactory();\n      var subscription = selector(subject).subscribe(subscriber);\n      subscription.add(source.subscribe(subject));\n      return subscription;\n    }\n  }]);\n\n  return MulticastOperator;\n}();","map":{"version":3,"sources":["../../../src/internal/operators/multicast.ts"],"names":[],"mappings":";;AAIA,SAAgC,+BAAhC,QAAuE,qCAAvE;AA6BA,OAAM,SAAU,SAAV,CAA0B,uBAA1B,EAC0B,QAD1B,EAC6E;AACjF,SAAO,SAAS,yBAAT,CAAmC,MAAnC,EAAwD;AAC7D,QAAI,cAAJ;;AACA,QAAI,OAAO,uBAAP,KAAmC,UAAvC,EAAmD;AACjD,MAAA,cAAc,GAAqB,uBAAnC;AACD,KAFD,MAEO;AACL,MAAA,cAAc,GAAG,SAAS,cAAT,GAAuB;AACtC,eAAmB,uBAAnB;AACD,OAFD;AAGD;;AAED,QAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,aAAO,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAJ,CAAsB,cAAtB,EAAsC,QAAtC,CAAZ,CAAP;AACD;;AAED,QAAM,WAAW,GAAQ,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,+BAAtB,CAAzB;AACA,IAAA,WAAW,CAAC,MAAZ,GAAqB,MAArB;AACA,IAAA,WAAW,CAAC,cAAZ,GAA6B,cAA7B;AAEA,WAAkC,WAAlC;AACD,GAnBD;AAoBD;AAED,WAAa,iBAAb;AACE,6BAAoB,cAApB,EACoB,QADpB,EACsE;AAAA;;AADlD,SAAA,cAAA,GAAA,cAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACnB;;AAHH;AAAA;AAAA,yBAIO,UAJP,EAIkC,MAJlC,EAI6C;AAAA,UACjC,QADiC,GACpB,IADoB,CACjC,QADiC;AAEzC,UAAM,OAAO,GAAG,KAAK,cAAL,EAAhB;AACA,UAAM,YAAY,GAAG,QAAQ,CAAC,OAAD,CAAR,CAAkB,SAAlB,CAA4B,UAA5B,CAArB;AACA,MAAA,YAAY,CAAC,GAAb,CAAiB,MAAM,CAAC,SAAP,CAAiB,OAAjB,CAAjB;AACA,aAAO,YAAP;AACD;AAVH;;AAAA;AAAA","sourcesContent":["import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\r\nexport function multicast(subjectOrSubjectFactory, selector) {\r\n    return function multicastOperatorFunction(source) {\r\n        let subjectFactory;\r\n        if (typeof subjectOrSubjectFactory === 'function') {\r\n            subjectFactory = subjectOrSubjectFactory;\r\n        }\r\n        else {\r\n            subjectFactory = function subjectFactory() {\r\n                return subjectOrSubjectFactory;\r\n            };\r\n        }\r\n        if (typeof selector === 'function') {\r\n            return source.lift(new MulticastOperator(subjectFactory, selector));\r\n        }\r\n        const connectable = Object.create(source, connectableObservableDescriptor);\r\n        connectable.source = source;\r\n        connectable.subjectFactory = subjectFactory;\r\n        return connectable;\r\n    };\r\n}\r\nexport class MulticastOperator {\r\n    constructor(subjectFactory, selector) {\r\n        this.subjectFactory = subjectFactory;\r\n        this.selector = selector;\r\n    }\r\n    call(subscriber, source) {\r\n        const { selector } = this;\r\n        const subject = this.subjectFactory();\r\n        const subscription = selector(subject).subscribe(subscriber);\r\n        subscription.add(source.subscribe(subject));\r\n        return subscription;\r\n    }\r\n}\r\n//# sourceMappingURL=multicast.js.map"]},"metadata":{},"sourceType":"module"}