{"ast":null,"code":"import { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function subscribeTo(result) {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    var value = isObject(result) ? 'an invalid object' : \"'\".concat(result, \"'\");\n    var msg = \"You provided \".concat(value, \" where a stream was expected.\") + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};","map":{"version":3,"sources":["../../../src/internal/util/subscribeTo.ts"],"names":[],"mappings":"AACA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,QAAQ,IAAI,eAArB,QAA4C,oBAA5C;AACA,SAAS,UAAU,IAAI,iBAAvB,QAAgD,sBAAhD;AAIA,OAAO,IAAM,WAAW,GAAG,SAAd,WAAc,CAAI,MAAJ,EAAsF;AAC/G,MAAI,CAAC,CAAC,MAAF,IAAY,OAAO,MAAM,CAAC,iBAAD,CAAb,KAAqC,UAArD,EAAiE;AAC/D,WAAO,qBAAqB,CAAC,MAAD,CAA5B;AACD,GAFD,MAEO,IAAI,WAAW,CAAC,MAAD,CAAf,EAAyB;AAC9B,WAAO,gBAAgB,CAAC,MAAD,CAAvB;AACD,GAFM,MAEA,IAAI,SAAS,CAAC,MAAD,CAAb,EAAuB;AAC5B,WAAO,kBAAkB,CAAC,MAAD,CAAzB;AACD,GAFM,MAEA,IAAI,CAAC,CAAC,MAAF,IAAY,OAAO,MAAM,CAAC,eAAD,CAAb,KAAmC,UAAnD,EAA+D;AACpE,WAAO,mBAAmB,CAAC,MAAD,CAA1B;AACD,GAFM,MAEA;AACL,QAAM,KAAK,GAAG,QAAQ,CAAC,MAAD,CAAR,GAAmB,mBAAnB,cAA6C,MAA7C,MAAd;AACA,QAAM,GAAG,GAAG,uBAAgB,KAAhB,qCACR,8DADJ;AAEA,UAAM,IAAI,SAAJ,CAAc,GAAd,CAAN;AACD;AACF,CAfM","sourcesContent":["import { subscribeToArray } from './subscribeToArray';\r\nimport { subscribeToPromise } from './subscribeToPromise';\r\nimport { subscribeToIterable } from './subscribeToIterable';\r\nimport { subscribeToObservable } from './subscribeToObservable';\r\nimport { isArrayLike } from './isArrayLike';\r\nimport { isPromise } from './isPromise';\r\nimport { isObject } from './isObject';\r\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\r\nimport { observable as Symbol_observable } from '../symbol/observable';\r\nexport const subscribeTo = (result) => {\r\n    if (!!result && typeof result[Symbol_observable] === 'function') {\r\n        return subscribeToObservable(result);\r\n    }\r\n    else if (isArrayLike(result)) {\r\n        return subscribeToArray(result);\r\n    }\r\n    else if (isPromise(result)) {\r\n        return subscribeToPromise(result);\r\n    }\r\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\r\n        return subscribeToIterable(result);\r\n    }\r\n    else {\r\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\r\n        const msg = `You provided ${value} where a stream was expected.`\r\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\r\n        throw new TypeError(msg);\r\n    }\r\n};\r\n//# sourceMappingURL=subscribeTo.js.map"]},"metadata":{},"sourceType":"module"}