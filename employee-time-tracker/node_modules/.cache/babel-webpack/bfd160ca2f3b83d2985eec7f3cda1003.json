{"ast":null,"code":"import _classCallCheck from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, inject, EventEmitter, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\n\nvar DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY\n});\n/** @docs-private */\n\nfunction DIR_DOCUMENT_FACTORY() {\n  return inject(DOCUMENT);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n\n\nvar Directionality =\n/** @class */\nfunction () {\n  var Directionality = /*#__PURE__*/function () {\n    function Directionality(_document) {\n      _classCallCheck(this, Directionality);\n\n      /** The current 'ltr' or 'rtl' value. */\n      this.value = 'ltr';\n      /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n\n      this.change = new EventEmitter();\n\n      if (_document) {\n        // TODO: handle 'auto' value -\n        // We still need to account for dir=\"auto\".\n        // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n        // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n        var bodyDir = _document.body ? _document.body.dir : null;\n        var htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n        var value = bodyDir || htmlDir;\n        this.value = value === 'ltr' || value === 'rtl' ? value : 'ltr';\n      }\n    }\n\n    _createClass(Directionality, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.change.complete();\n      }\n    }]);\n\n    return Directionality;\n  }();\n\n  Directionality.ɵprov = ɵɵdefineInjectable({\n    factory: function Directionality_Factory() {\n      return new Directionality(ɵɵinject(DIR_DOCUMENT, 8));\n    },\n    token: Directionality,\n    providedIn: \"root\"\n  });\n  Directionality.decorators = [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }];\n\n  Directionality.ctorParameters = function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DIR_DOCUMENT]\n      }]\n    }];\n  };\n\n  return Directionality;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n\n\nvar Dir =\n/** @class */\nfunction () {\n  var Dir = /*#__PURE__*/function () {\n    function Dir() {\n      _classCallCheck(this, Dir);\n\n      /** Normalized direction that accounts for invalid/unsupported values. */\n      this._dir = 'ltr';\n      /** Whether the `value` has been set to its initial value. */\n\n      this._isInitialized = false;\n      /** Event emitted when the direction changes. */\n\n      this.change = new EventEmitter();\n    }\n    /** @docs-private */\n\n\n    _createClass(Dir, [{\n      key: \"ngAfterContentInit\",\n\n      /** Initialize once default value has been set. */\n      value: function ngAfterContentInit() {\n        this._isInitialized = true;\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.change.complete();\n      }\n    }, {\n      key: \"dir\",\n      get: function get() {\n        return this._dir;\n      },\n      set: function set(value) {\n        var old = this._dir;\n        var normalizedValue = value ? value.toLowerCase() : value;\n        this._rawDir = value;\n        this._dir = normalizedValue === 'ltr' || normalizedValue === 'rtl' ? normalizedValue : 'ltr';\n\n        if (old !== this._dir && this._isInitialized) {\n          this.change.emit(this._dir);\n        }\n      }\n      /** Current layout direction of the element. */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this.dir;\n      }\n    }]);\n\n    return Dir;\n  }();\n\n  Dir.decorators = [{\n    type: Directive,\n    args: [{\n      selector: '[dir]',\n      providers: [{\n        provide: Directionality,\n        useExisting: Dir\n      }],\n      host: {\n        '[attr.dir]': '_rawDir'\n      },\n      exportAs: 'dir'\n    }]\n  }];\n  Dir.propDecorators = {\n    change: [{\n      type: Output,\n      args: ['dirChange']\n    }],\n    dir: [{\n      type: Input\n    }]\n  };\n  return Dir;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar BidiModule =\n/** @class */\nfunction () {\n  var BidiModule = function BidiModule() {\n    _classCallCheck(this, BidiModule);\n  };\n\n  BidiModule.decorators = [{\n    type: NgModule,\n    args: [{\n      exports: [Dir],\n      declarations: [Dir]\n    }]\n  }];\n  return BidiModule;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality, DIR_DOCUMENT_FACTORY as ɵangular_material_src_cdk_bidi_bidi_a };","map":{"version":3,"sources":["../../../../../../src/cdk/bidi/dir-document-token.ts","../../../../../../src/cdk/bidi/directionality.ts","../../../../../../src/cdk/bidi/dir.ts","../../../../../../src/cdk/bidi/bidi-module.ts","../../../../../../src/cdk/bidi/public-api.ts","../../../../../../src/cdk/bidi/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\n\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY,\n});\n\n/** @docs-private */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n  return inject(DOCUMENT);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Inject, Injectable, Optional, OnDestroy} from '@angular/core';\nimport {DIR_DOCUMENT} from './dir-document-token';\n\n\nexport type Direction = 'ltr' | 'rtl';\n\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n  /** The current 'ltr' or 'rtl' value. */\n  readonly value: Direction = 'ltr';\n\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n  readonly change = new EventEmitter<Direction>();\n\n  constructor(@Optional() @Inject(DIR_DOCUMENT) _document?: any) {\n    if (_document) {\n      // TODO: handle 'auto' value -\n      // We still need to account for dir=\"auto\".\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      const value = bodyDir || htmlDir;\n      this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Output,\n  Input,\n  EventEmitter,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport {Direction, Directionality} from './directionality';\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n@Directive({\n  selector: '[dir]',\n  providers: [{provide: Directionality, useExisting: Dir}],\n  host: {'[attr.dir]': '_rawDir'},\n  exportAs: 'dir',\n})\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n  /** Normalized direction that accounts for invalid/unsupported values. */\n  private _dir: Direction = 'ltr';\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Direction as passed in by the consumer. */\n  _rawDir: string;\n\n  /** Event emitted when the direction changes. */\n  @Output('dirChange') change = new EventEmitter<Direction>();\n\n  /** @docs-private */\n  @Input()\n  get dir(): Direction { return this._dir; }\n  set dir(value: Direction) {\n    const old = this._dir;\n    const normalizedValue = value ? value.toLowerCase() : value;\n\n    this._rawDir = value;\n    this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\n\n    if (old !== this._dir && this._isInitialized) {\n      this.change.emit(this._dir);\n    }\n  }\n\n  /** Current layout direction of the element. */\n  get value(): Direction { return this.dir; }\n\n  /** Initialize once default value has been set. */\n  ngAfterContentInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {Dir} from './dir';\n\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir],\n})\nexport class BidiModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {Directionality, Direction} from './directionality';\nexport {DIR_DOCUMENT} from './dir-document-token';\nexport {Dir} from './dir';\nexport * from './bidi-module';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DIR_DOCUMENT_FACTORY as Éµangular_material_src_cdk_bidi_bidi_a} from './dir-document-token';"]},"metadata":{},"sourceType":"module"}