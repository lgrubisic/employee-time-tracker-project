{"ast":null,"code":"import _createClass from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c2 = [\"*\"];\nvar MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n  providedIn: 'root',\n  factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate'\n  };\n}\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n * @breaking-change 10.0.0\n */\n\n\nvar MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for checkbox components.\n\nvar nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\n\nvar MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatCheckbox;\n  }),\n  multi: true\n};\n/** Change event object emitted by MatCheckbox. */\n\nvar MatCheckboxChange = function MatCheckboxChange() {\n  _classCallCheck(this, MatCheckboxChange);\n}; // Boilerplate for applying mixins to MatCheckbox.\n\n/** @docs-private */\n\n\nvar MatCheckboxBase = function MatCheckboxBase(_elementRef) {\n  _classCallCheck(this, MatCheckboxBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n\n\nvar MatCheckbox =\n/** @class */\nfunction () {\n  var MatCheckbox = /*#__PURE__*/function (_MatCheckboxMixinBase2) {\n    _inherits(MatCheckbox, _MatCheckboxMixinBase2);\n\n    var _super = _createSuper(MatCheckbox);\n\n    function MatCheckbox(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex,\n    /**\n     * @deprecated `_clickAction` parameter to be removed, use\n     * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n     * @breaking-change 10.0.0\n     */\n    _clickAction, _animationMode, _options) {\n      var _this;\n\n      _classCallCheck(this, MatCheckbox);\n\n      _this = _super.call(this, elementRef);\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._focusMonitor = _focusMonitor;\n      _this._ngZone = _ngZone;\n      _this._clickAction = _clickAction;\n      _this._animationMode = _animationMode;\n      _this._options = _options;\n      /**\n       * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n       * take precedence so this may be omitted.\n       */\n\n      _this.ariaLabel = '';\n      /**\n       * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n       */\n\n      _this.ariaLabelledby = null;\n      _this._uniqueId = \"mat-checkbox-\".concat(++nextUniqueId);\n      /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n\n      _this.id = _this._uniqueId;\n      /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n\n      _this.labelPosition = 'after';\n      /** Name value will be applied to the input element if present */\n\n      _this.name = null;\n      /** Event emitted when the checkbox's `checked` value changes. */\n\n      _this.change = new EventEmitter();\n      /** Event emitted when the checkbox's `indeterminate` value changes. */\n\n      _this.indeterminateChange = new EventEmitter();\n      /**\n       * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n       * @docs-private\n       */\n\n      _this._onTouched = function () {};\n\n      _this._currentAnimationClass = '';\n      _this._currentCheckState = 0\n      /* Init */\n      ;\n\n      _this._controlValueAccessorChangeFn = function () {};\n\n      _this._checked = false;\n      _this._disabled = false;\n      _this._indeterminate = false;\n      _this._options = _this._options || {};\n\n      if (_this._options.color) {\n        _this.color = _this._options.color;\n      }\n\n      _this.tabIndex = parseInt(tabIndex) || 0; // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n\n      _this._clickAction = _this._clickAction || _this._options.clickAction;\n      return _this;\n    }\n    /** Returns the unique id for the visual hidden input. */\n\n\n    _createClass(MatCheckbox, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this2 = this;\n\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(function (focusOrigin) {\n          if (!focusOrigin) {\n            // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n            // Angular does not expect events to be raised during change detection, so any state change\n            // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n            // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n            // telling the form control it has been touched until the next tick.\n            Promise.resolve().then(function () {\n              _this2._onTouched();\n\n              _this2._changeDetectorRef.markForCheck();\n            });\n          }\n        });\n\n        this._syncIndeterminate(this._indeterminate);\n      } // TODO: Delete next major revision.\n\n    }, {\n      key: \"ngAfterViewChecked\",\n      value: function ngAfterViewChecked() {}\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n      /**\n       * Whether the checkbox is checked.\n       */\n\n    }, {\n      key: \"_isRippleDisabled\",\n      value: function _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n      }\n      /** Method being called whenever the label text changes. */\n\n    }, {\n      key: \"_onLabelTextChange\",\n      value: function _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.checked = !!value;\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this._onTouched = fn;\n      } // Implemented as part of ControlValueAccessor.\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n      }\n    }, {\n      key: \"_getAriaChecked\",\n      value: function _getAriaChecked() {\n        if (this.checked) {\n          return 'true';\n        }\n\n        return this.indeterminate ? 'mixed' : 'false';\n      }\n    }, {\n      key: \"_transitionCheckState\",\n      value: function _transitionCheckState(newState) {\n        var oldState = this._currentCheckState;\n        var element = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n          return;\n        }\n\n        if (this._currentAnimationClass.length > 0) {\n          element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n          element.classList.add(this._currentAnimationClass); // Remove the animation class to avoid animation when the checkbox is moved between containers\n\n          var animationClass = this._currentAnimationClass;\n\n          this._ngZone.runOutsideAngular(function () {\n            setTimeout(function () {\n              element.classList.remove(animationClass);\n            }, 1000);\n          });\n        }\n      }\n    }, {\n      key: \"_emitChangeEvent\",\n      value: function _emitChangeEvent() {\n        var event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n\n        this.change.emit(event);\n      }\n      /** Toggles the `checked` state of the checkbox. */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        this.checked = !this.checked;\n      }\n      /**\n       * Event handler for checkbox input element.\n       * Toggles checked state if element is not disabled.\n       * Do not toggle on (change) event since IE doesn't fire change event when\n       *   indeterminate checkbox is clicked.\n       * @param event\n       */\n\n    }, {\n      key: \"_onInputClick\",\n      value: function _onInputClick(event) {\n        var _this3 = this;\n\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation(); // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n\n        if (!this.disabled && this._clickAction !== 'noop') {\n          // When user manually click on the checkbox, `indeterminate` is set to false.\n          if (this.indeterminate && this._clickAction !== 'check') {\n            Promise.resolve().then(function () {\n              _this3._indeterminate = false;\n\n              _this3.indeterminateChange.emit(_this3._indeterminate);\n            });\n          }\n\n          this.toggle();\n\n          this._transitionCheckState(this._checked ? 1\n          /* Checked */\n          : 2\n          /* Unchecked */\n          ); // Emit our custom change event if the native input emitted one.\n          // It is important to only emit it, if the native input triggered one, because\n          // we don't want to trigger a change event, when the `checked` variable changes for example.\n\n\n          this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n          // Reset native input when clicked with noop. The native checkbox becomes checked after\n          // click, reset it to be align with `checked` value of `mat-checkbox`.\n          this._inputElement.nativeElement.checked = this.checked;\n          this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n      }\n      /** Focuses the checkbox. */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'keyboard';\n        var options = arguments.length > 1 ? arguments[1] : undefined;\n\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n      }\n    }, {\n      key: \"_onInteractionEvent\",\n      value: function _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n      }\n    }, {\n      key: \"_getAnimationClassForCheckStateTransition\",\n      value: function _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n          return '';\n        }\n\n        var animSuffix = '';\n\n        switch (oldState) {\n          case 0\n          /* Init */\n          :\n            // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n            // [checked] bound to it.\n            if (newState === 1\n            /* Checked */\n            ) {\n                animSuffix = 'unchecked-checked';\n              } else if (newState == 3\n            /* Indeterminate */\n            ) {\n                animSuffix = 'unchecked-indeterminate';\n              } else {\n              return '';\n            }\n\n            break;\n\n          case 2\n          /* Unchecked */\n          :\n            animSuffix = newState === 1\n            /* Checked */\n            ? 'unchecked-checked' : 'unchecked-indeterminate';\n            break;\n\n          case 1\n          /* Checked */\n          :\n            animSuffix = newState === 2\n            /* Unchecked */\n            ? 'checked-unchecked' : 'checked-indeterminate';\n            break;\n\n          case 3\n          /* Indeterminate */\n          :\n            animSuffix = newState === 1\n            /* Checked */\n            ? 'indeterminate-checked' : 'indeterminate-unchecked';\n            break;\n        }\n\n        return \"mat-checkbox-anim-\".concat(animSuffix);\n      }\n      /**\n       * Syncs the indeterminate value with the checkbox DOM node.\n       *\n       * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n       * property is supported on an element boils down to `if (propName in element)`. Domino's\n       * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n       * server-side rendering.\n       */\n\n    }, {\n      key: \"_syncIndeterminate\",\n      value: function _syncIndeterminate(value) {\n        var nativeCheckbox = this._inputElement;\n\n        if (nativeCheckbox) {\n          nativeCheckbox.nativeElement.indeterminate = value;\n        }\n      }\n    }, {\n      key: \"inputId\",\n      get: function get() {\n        return \"\".concat(this.id || this._uniqueId, \"-input\");\n      }\n      /** Whether the checkbox is required. */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        return this._required;\n      },\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"checked\",\n      get: function get() {\n        return this._checked;\n      },\n      set: function set(value) {\n        if (value != this.checked) {\n          this._checked = value;\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /**\n       * Whether the checkbox is disabled. This fully overrides the implementation provided by\n       * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        var newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this.disabled) {\n          this._disabled = newValue;\n\n          this._changeDetectorRef.markForCheck();\n        }\n      }\n      /**\n       * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n       * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n       * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n       * set to false.\n       */\n\n    }, {\n      key: \"indeterminate\",\n      get: function get() {\n        return this._indeterminate;\n      },\n      set: function set(value) {\n        var changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n\n        if (changed) {\n          if (this._indeterminate) {\n            this._transitionCheckState(3\n            /* Indeterminate */\n            );\n          } else {\n            this._transitionCheckState(this.checked ? 1\n            /* Checked */\n            : 2\n            /* Unchecked */\n            );\n          }\n\n          this.indeterminateChange.emit(this._indeterminate);\n        }\n\n        this._syncIndeterminate(this._indeterminate);\n      }\n    }]);\n\n    return MatCheckbox;\n  }(_MatCheckboxMixinBase);\n\n  MatCheckbox.ɵfac = function MatCheckbox_Factory(t) {\n    return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_DEFAULT_OPTIONS, 8));\n  };\n\n  MatCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: MatCheckbox,\n    selectors: [[\"mat-checkbox\"]],\n    viewQuery: function MatCheckbox_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(MatRipple, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-checkbox\"],\n    hostVars: 12,\n    hostBindings: function MatCheckbox_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      disableRipple: \"disableRipple\",\n      color: \"color\",\n      tabIndex: \"tabIndex\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      id: \"id\",\n      labelPosition: \"labelPosition\",\n      name: \"name\",\n      required: \"required\",\n      checked: \"checked\",\n      disabled: \"disabled\",\n      indeterminate: \"indeterminate\",\n      ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n      value: \"value\"\n    },\n    outputs: {\n      change: \"change\",\n      indeterminateChange: \"indeterminateChange\"\n    },\n    exportAs: [\"matCheckbox\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c2,\n    decls: 17,\n    vars: 20,\n    consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]],\n    template: function MatCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) {\n          return ctx._onInteractionEvent($event);\n        })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) {\n          return ctx._onInputClick($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(7, \"div\", 7);\n        ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n        ɵngcc0.ɵɵelement(10, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(11, \"div\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() {\n          return ctx._onLabelTextChange();\n        });\n        ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n        ɵngcc0.ɵɵtext(15, \"\\xA0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(16);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        var _r0 = ɵngcc0.ɵɵreference(1);\n\n        var _r2 = ɵngcc0.ɵɵreference(13);\n\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked())(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n      }\n    },\n    directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent],\n    styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  MatCheckbox.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: FocusMonitor\n    }, {\n      type: NgZone\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_CHECKBOX_CLICK_ACTION]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n      }]\n    }];\n  };\n\n  MatCheckbox.propDecorators = {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    id: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    indeterminateChange: [{\n      type: Output\n    }],\n    value: [{\n      type: Input\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    indeterminate: [{\n      type: Input\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n      type: Component,\n      args: [{\n        selector: 'mat-checkbox',\n        template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <div class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <div matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n      <div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div>\\n    </div>\\n    <div class=\\\"mat-checkbox-frame\\\"></div>\\n    <div class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <div class=\\\"mat-checkbox-mixedmark\\\"></div>\\n    </div>\\n  </div>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n        exportAs: 'matCheckbox',\n        host: {\n          'class': 'mat-checkbox',\n          '[id]': 'id',\n          '[attr.tabindex]': 'null',\n          '[class.mat-checkbox-indeterminate]': 'indeterminate',\n          '[class.mat-checkbox-checked]': 'checked',\n          '[class.mat-checkbox-disabled]': 'disabled',\n          '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n          '[class._mat-animation-noopable]': \"_animationMode === 'NoopAnimations'\"\n        },\n        providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n        inputs: ['disableRipple', 'color', 'tabIndex'],\n        encapsulation: ViewEncapsulation.None,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"]\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc0.ChangeDetectorRef\n      }, {\n        type: ɵngcc1.FocusMonitor\n      }, {\n        type: ɵngcc0.NgZone\n      }, {\n        type: String,\n        decorators: [{\n          type: Attribute,\n          args: ['tabindex']\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [MAT_CHECKBOX_CLICK_ACTION]\n        }]\n      }, {\n        type: String,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [ANIMATION_MODULE_TYPE]\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n        }]\n      }];\n    }, {\n      ariaLabel: [{\n        type: Input,\n        args: ['aria-label']\n      }],\n      ariaLabelledby: [{\n        type: Input,\n        args: ['aria-labelledby']\n      }],\n      id: [{\n        type: Input\n      }],\n      labelPosition: [{\n        type: Input\n      }],\n      name: [{\n        type: Input\n      }],\n      change: [{\n        type: Output\n      }],\n      indeterminateChange: [{\n        type: Output\n      }],\n      required: [{\n        type: Input\n      }],\n      checked: [{\n        type: Input\n      }],\n      disabled: [{\n        type: Input\n      }],\n      indeterminate: [{\n        type: Input\n      }],\n      ariaDescribedby: [{\n        type: Input,\n        args: ['aria-describedby']\n      }],\n      value: [{\n        type: Input\n      }],\n      _inputElement: [{\n        type: ViewChild,\n        args: ['input']\n      }],\n      ripple: [{\n        type: ViewChild,\n        args: [MatRipple]\n      }]\n    });\n  })();\n\n  return MatCheckbox;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MatCheckboxRequiredValidator;\n  }),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n\nvar MatCheckboxRequiredValidator =\n/** @class */\nfunction () {\n  var MatCheckboxRequiredValidator = /*#__PURE__*/function (_CheckboxRequiredVali) {\n    _inherits(MatCheckboxRequiredValidator, _CheckboxRequiredVali);\n\n    var _super2 = _createSuper(MatCheckboxRequiredValidator);\n\n    function MatCheckboxRequiredValidator() {\n      _classCallCheck(this, MatCheckboxRequiredValidator);\n\n      return _super2.apply(this, arguments);\n    }\n\n    return MatCheckboxRequiredValidator;\n  }(CheckboxRequiredValidator);\n\n  MatCheckboxRequiredValidator.ɵfac = function MatCheckboxRequiredValidator_Factory(t) {\n    return ɵMatCheckboxRequiredValidator_BaseFactory(t || MatCheckboxRequiredValidator);\n  };\n\n  MatCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: MatCheckboxRequiredValidator,\n    selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵMatCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n      type: Directive,\n      args: [{\n        selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\",\n        providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n      }]\n    }], null, null);\n  })();\n\n  return MatCheckboxRequiredValidator;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n\n\nvar _MatCheckboxRequiredValidatorModule =\n/** @class */\nfunction () {\n  var _MatCheckboxRequiredValidatorModule = function _MatCheckboxRequiredValidatorModule() {\n    _classCallCheck(this, _MatCheckboxRequiredValidatorModule);\n  };\n\n  _MatCheckboxRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: _MatCheckboxRequiredValidatorModule\n  });\n  _MatCheckboxRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function _MatCheckboxRequiredValidatorModule_Factory(t) {\n      return new (t || _MatCheckboxRequiredValidatorModule)();\n    }\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatCheckboxRequiredValidatorModule, {\n      declarations: [MatCheckboxRequiredValidator],\n      exports: [MatCheckboxRequiredValidator]\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(_MatCheckboxRequiredValidatorModule, [{\n      type: NgModule,\n      args: [{\n        exports: [MatCheckboxRequiredValidator],\n        declarations: [MatCheckboxRequiredValidator]\n      }]\n    }], null, null);\n  })();\n\n  return _MatCheckboxRequiredValidatorModule;\n}();\n\nvar MatCheckboxModule =\n/** @class */\nfunction () {\n  var MatCheckboxModule = function MatCheckboxModule() {\n    _classCallCheck(this, MatCheckboxModule);\n  };\n\n  MatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: MatCheckboxModule\n  });\n  MatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function MatCheckboxModule_Factory(t) {\n      return new (t || MatCheckboxModule)();\n    },\n    imports: [[MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], MatCommonModule, _MatCheckboxRequiredValidatorModule]\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, {\n      declarations: function declarations() {\n        return [MatCheckbox];\n      },\n      imports: function imports() {\n        return [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule];\n      },\n      exports: function exports() {\n        return [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule];\n      }\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n      type: NgModule,\n      args: [{\n        imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n        exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n        declarations: [MatCheckbox]\n      }]\n    }], null, null);\n  })();\n\n  return MatCheckboxModule;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_CHECKBOX_CLICK_ACTION, MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };","map":{"version":3,"sources":["../../../../../../src/material/checkbox/checkbox-config.ts","../../../../../../src/material/checkbox/checkbox.ts","../../../../../../src/material/checkbox/checkbox-required-validator.ts","../../../../../../src/material/checkbox/checkbox-module.ts","../../../../../../src/material/checkbox/public-api.ts","../../../../../../src/material/checkbox/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  color?: ThemePalette;\n  clickAction?: MatCheckboxClickAction;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS =\n    new InjectionToken<MatCheckboxDefaultOptions>('mat-checkbox-default-options', {\n      providedIn: 'root',\n      factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n * @breaking-change 10.0.0\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_CHECKBOX_CLICK_ACTION,\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MatCheckboxClickAction,\n  MatCheckboxDefaultOptions\n} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport const enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated `_clickAction` parameter to be removed, use\n               * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n               * @breaking-change 10.0.0\n               */\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS)\n                  private _options?: MatCheckboxDefaultOptions) {\n    super(elementRef);\n    this._options = this._options || {};\n\n    if (this._options.color) {\n      this.color = this._options.color;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n    this._clickAction = this._clickAction || this._options.clickAction;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = coerceBooleanProperty(value);\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_indeterminate: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './checkbox';\nexport * from './checkbox-config';\nexport * from './checkbox-module';\nexport * from './checkbox-required-validator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}