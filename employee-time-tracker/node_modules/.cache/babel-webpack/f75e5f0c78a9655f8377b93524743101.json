{"ast":null,"code":"import _get from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nvar BufferWhenOperator = /*#__PURE__*/function () {\n  function BufferWhenOperator(closingSelector) {\n    _classCallCheck(this, BufferWhenOperator);\n\n    this.closingSelector = closingSelector;\n  }\n\n  _createClass(BufferWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    }\n  }]);\n\n  return BufferWhenOperator;\n}();\n\nvar BufferWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(BufferWhenSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(BufferWhenSubscriber);\n\n  function BufferWhenSubscriber(destination, closingSelector) {\n    var _this;\n\n    _classCallCheck(this, BufferWhenSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.closingSelector = closingSelector;\n    _this.subscribing = false;\n\n    _this.openBuffer();\n\n    return _this;\n  }\n\n  _createClass(BufferWhenSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.buffer.push(value);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var buffer = this.buffer;\n\n      if (buffer) {\n        this.destination.next(buffer);\n      }\n\n      _get(_getPrototypeOf(BufferWhenSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.buffer = null;\n      this.subscribing = false;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.openBuffer();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      if (this.subscribing) {\n        this.complete();\n      } else {\n        this.openBuffer();\n      }\n    }\n  }, {\n    key: \"openBuffer\",\n    value: function openBuffer() {\n      var closingSubscription = this.closingSubscription;\n\n      if (closingSubscription) {\n        this.remove(closingSubscription);\n        closingSubscription.unsubscribe();\n      }\n\n      var buffer = this.buffer;\n\n      if (this.buffer) {\n        this.destination.next(buffer);\n      }\n\n      this.buffer = [];\n      var closingNotifier;\n\n      try {\n        var closingSelector = this.closingSelector;\n        closingNotifier = closingSelector();\n      } catch (err) {\n        return this.error(err);\n      }\n\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }]);\n\n  return BufferWhenSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/bufferWhen.ts"],"names":[],"mappings":";;;;;;AAGA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AA6CA,OAAM,SAAU,UAAV,CAAwB,eAAxB,EAA8D;AAClE,SAAO,UAAU,MAAV,EAA+B;AACpC,WAAO,MAAM,CAAC,IAAP,CAAY,IAAI,kBAAJ,CAAuB,eAAvB,CAAZ,CAAP;AACD,GAFD;AAGD;;IAEK,kB;AAEJ,8BAAoB,eAApB,EAA0D;AAAA;;AAAtC,SAAA,eAAA,GAAA,eAAA;AACnB;;;;yBAEI,U,EAA6B,M,EAAW;AAC3C,aAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,oBAAJ,CAAyB,UAAzB,EAAqC,KAAK,eAA1C,CAAjB,CAAP;AACD;;;;;;IAQG,oB;;;;;AAKJ,gCAAY,WAAZ,EAAkD,eAAlD,EAAwF;AAAA;;AAAA;;AACtF,8BAAM,WAAN;AADgD,UAAA,eAAA,GAAA,eAAA;AAH1C,UAAA,WAAA,GAAuB,KAAvB;;AAKN,UAAK,UAAL;;AAFsF;AAGvF;;;;0BAEe,K,EAAQ;AACtB,WAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACD;;;gCAEkB;AACjB,UAAM,MAAM,GAAG,KAAK,MAApB;;AACA,UAAI,MAAJ,EAAY;AACV,aAAK,WAAL,CAAiB,IAAjB,CAAsB,MAAtB;AACD;;AACD;AACD;;;mCAGW;AACV,WAAK,MAAL,GAAc,IAAd;AACA,WAAK,WAAL,GAAmB,KAAnB;AACD;;;+BAEU,U,EAAe,U,EACf,U,EAAoB,U,EACpB,Q,EAAiC;AAC1C,WAAK,UAAL;AACD;;;qCAEa;AACZ,UAAI,KAAK,WAAT,EAAsB;AACpB,aAAK,QAAL;AACD,OAFD,MAEO;AACL,aAAK,UAAL;AACD;AACF;;;iCAES;AAAA,UACF,mBADE,GACsB,IADtB,CACF,mBADE;;AAGR,UAAI,mBAAJ,EAAyB;AACvB,aAAK,MAAL,CAAY,mBAAZ;AACA,QAAA,mBAAmB,CAAC,WAApB;AACD;;AAED,UAAM,MAAM,GAAG,KAAK,MAApB;;AACA,UAAI,KAAK,MAAT,EAAiB;AACf,aAAK,WAAL,CAAiB,IAAjB,CAAsB,MAAtB;AACD;;AAED,WAAK,MAAL,GAAc,EAAd;AAEA,UAAI,eAAJ;;AACA,UAAI;AAAA,YACM,eADN,GAC0B,IAD1B,CACM,eADN;AAEF,QAAA,eAAe,GAAG,eAAe,EAAjC;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;AACZ,eAAO,KAAK,KAAL,CAAW,GAAX,CAAP;AACD;;AACD,MAAA,mBAAmB,GAAG,IAAI,YAAJ,EAAtB;AACA,WAAK,mBAAL,GAA2B,mBAA3B;AACA,WAAK,GAAL,CAAS,mBAAT;AACA,WAAK,WAAL,GAAmB,IAAnB;AACA,MAAA,mBAAmB,CAAC,GAApB,CAAwB,iBAAiB,CAAC,IAAD,EAAO,eAAP,CAAzC;AACA,WAAK,WAAL,GAAmB,KAAnB;AACD;;;;EAtEmC,e","sourcesContent":["import { Subscription } from '../Subscription';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nexport function bufferWhen(closingSelector) {\r\n    return function (source) {\r\n        return source.lift(new BufferWhenOperator(closingSelector));\r\n    };\r\n}\r\nclass BufferWhenOperator {\r\n    constructor(closingSelector) {\r\n        this.closingSelector = closingSelector;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\r\n    }\r\n}\r\nclass BufferWhenSubscriber extends OuterSubscriber {\r\n    constructor(destination, closingSelector) {\r\n        super(destination);\r\n        this.closingSelector = closingSelector;\r\n        this.subscribing = false;\r\n        this.openBuffer();\r\n    }\r\n    _next(value) {\r\n        this.buffer.push(value);\r\n    }\r\n    _complete() {\r\n        const buffer = this.buffer;\r\n        if (buffer) {\r\n            this.destination.next(buffer);\r\n        }\r\n        super._complete();\r\n    }\r\n    _unsubscribe() {\r\n        this.buffer = null;\r\n        this.subscribing = false;\r\n    }\r\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this.openBuffer();\r\n    }\r\n    notifyComplete() {\r\n        if (this.subscribing) {\r\n            this.complete();\r\n        }\r\n        else {\r\n            this.openBuffer();\r\n        }\r\n    }\r\n    openBuffer() {\r\n        let { closingSubscription } = this;\r\n        if (closingSubscription) {\r\n            this.remove(closingSubscription);\r\n            closingSubscription.unsubscribe();\r\n        }\r\n        const buffer = this.buffer;\r\n        if (this.buffer) {\r\n            this.destination.next(buffer);\r\n        }\r\n        this.buffer = [];\r\n        let closingNotifier;\r\n        try {\r\n            const { closingSelector } = this;\r\n            closingNotifier = closingSelector();\r\n        }\r\n        catch (err) {\r\n            return this.error(err);\r\n        }\r\n        closingSubscription = new Subscription();\r\n        this.closingSubscription = closingSubscription;\r\n        this.add(closingSubscription);\r\n        this.subscribing = true;\r\n        closingSubscription.add(subscribeToResult(this, closingNotifier));\r\n        this.subscribing = false;\r\n    }\r\n}\r\n//# sourceMappingURL=bufferWhen.js.map"]},"metadata":{},"sourceType":"module"}