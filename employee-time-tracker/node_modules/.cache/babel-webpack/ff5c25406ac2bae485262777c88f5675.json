{"ast":null,"code":"import _assertThisInitialized from \"C:/Users/imarusic/Desktop/test2/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"C:/Users/imarusic/Desktop/test2/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/imarusic/Desktop/test2/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/imarusic/Desktop/test2/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/imarusic/Desktop/test2/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/imarusic/Desktop/test2/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/imarusic/Desktop/test2/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return function (source) {\n    return source.lift(new WindowToggleOperator(openings, closingSelector));\n  };\n}\n\nvar WindowToggleOperator = /*#__PURE__*/function () {\n  function WindowToggleOperator(openings, closingSelector) {\n    _classCallCheck(this, WindowToggleOperator);\n\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  _createClass(WindowToggleOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n  }]);\n\n  return WindowToggleOperator;\n}();\n\nvar WindowToggleSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(WindowToggleSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(WindowToggleSubscriber);\n\n  function WindowToggleSubscriber(destination, openings, closingSelector) {\n    var _this;\n\n    _classCallCheck(this, WindowToggleSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.openings = openings;\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(_this.openSubscription = subscribeToResult(_assertThisInitialized(_this), openings, openings));\n\n    return _this;\n  }\n\n  _createClass(WindowToggleSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var contexts = this.contexts;\n\n      if (contexts) {\n        var len = contexts.length;\n\n        for (var i = 0; i < len; i++) {\n          contexts[i].window.next(value);\n        }\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.error(err);\n          context.subscription.unsubscribe();\n        }\n      }\n\n      _get(_getPrototypeOf(WindowToggleSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.complete();\n          context.subscription.unsubscribe();\n        }\n      }\n\n      _get(_getPrototypeOf(WindowToggleSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.unsubscribe();\n          context.subscription.unsubscribe();\n        }\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      if (outerValue === this.openings) {\n        var closingNotifier;\n\n        try {\n          var closingSelector = this.closingSelector;\n          closingNotifier = closingSelector(innerValue);\n        } catch (e) {\n          return this.error(e);\n        }\n\n        var window = new Subject();\n        var subscription = new Subscription();\n        var context = {\n          window: window,\n          subscription: subscription\n        };\n        this.contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          innerSubscription.context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n      } else {\n        this.closeWindow(this.contexts.indexOf(outerValue));\n      }\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(err) {\n      this.error(err);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(inner) {\n      if (inner !== this.openSubscription) {\n        this.closeWindow(this.contexts.indexOf(inner.context));\n      }\n    }\n  }, {\n    key: \"closeWindow\",\n    value: function closeWindow(index) {\n      if (index === -1) {\n        return;\n      }\n\n      var contexts = this.contexts;\n      var context = contexts[index];\n      var window = context.window,\n          subscription = context.subscription;\n      contexts.splice(index, 1);\n      window.complete();\n      subscription.unsubscribe();\n    }\n  }]);\n\n  return WindowToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/windowToggle.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from '../Subject';\r\nimport { Subscription } from '../Subscription';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nexport function windowToggle(openings, closingSelector) {\r\n    return (source) => source.lift(new WindowToggleOperator(openings, closingSelector));\r\n}\r\nclass WindowToggleOperator {\r\n    constructor(openings, closingSelector) {\r\n        this.openings = openings;\r\n        this.closingSelector = closingSelector;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\r\n    }\r\n}\r\nclass WindowToggleSubscriber extends OuterSubscriber {\r\n    constructor(destination, openings, closingSelector) {\r\n        super(destination);\r\n        this.openings = openings;\r\n        this.closingSelector = closingSelector;\r\n        this.contexts = [];\r\n        this.add(this.openSubscription = subscribeToResult(this, openings, openings));\r\n    }\r\n    _next(value) {\r\n        const { contexts } = this;\r\n        if (contexts) {\r\n            const len = contexts.length;\r\n            for (let i = 0; i < len; i++) {\r\n                contexts[i].window.next(value);\r\n            }\r\n        }\r\n    }\r\n    _error(err) {\r\n        const { contexts } = this;\r\n        this.contexts = null;\r\n        if (contexts) {\r\n            const len = contexts.length;\r\n            let index = -1;\r\n            while (++index < len) {\r\n                const context = contexts[index];\r\n                context.window.error(err);\r\n                context.subscription.unsubscribe();\r\n            }\r\n        }\r\n        super._error(err);\r\n    }\r\n    _complete() {\r\n        const { contexts } = this;\r\n        this.contexts = null;\r\n        if (contexts) {\r\n            const len = contexts.length;\r\n            let index = -1;\r\n            while (++index < len) {\r\n                const context = contexts[index];\r\n                context.window.complete();\r\n                context.subscription.unsubscribe();\r\n            }\r\n        }\r\n        super._complete();\r\n    }\r\n    _unsubscribe() {\r\n        const { contexts } = this;\r\n        this.contexts = null;\r\n        if (contexts) {\r\n            const len = contexts.length;\r\n            let index = -1;\r\n            while (++index < len) {\r\n                const context = contexts[index];\r\n                context.window.unsubscribe();\r\n                context.subscription.unsubscribe();\r\n            }\r\n        }\r\n    }\r\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        if (outerValue === this.openings) {\r\n            let closingNotifier;\r\n            try {\r\n                const { closingSelector } = this;\r\n                closingNotifier = closingSelector(innerValue);\r\n            }\r\n            catch (e) {\r\n                return this.error(e);\r\n            }\r\n            const window = new Subject();\r\n            const subscription = new Subscription();\r\n            const context = { window, subscription };\r\n            this.contexts.push(context);\r\n            const innerSubscription = subscribeToResult(this, closingNotifier, context);\r\n            if (innerSubscription.closed) {\r\n                this.closeWindow(this.contexts.length - 1);\r\n            }\r\n            else {\r\n                innerSubscription.context = context;\r\n                subscription.add(innerSubscription);\r\n            }\r\n            this.destination.next(window);\r\n        }\r\n        else {\r\n            this.closeWindow(this.contexts.indexOf(outerValue));\r\n        }\r\n    }\r\n    notifyError(err) {\r\n        this.error(err);\r\n    }\r\n    notifyComplete(inner) {\r\n        if (inner !== this.openSubscription) {\r\n            this.closeWindow(this.contexts.indexOf(inner.context));\r\n        }\r\n    }\r\n    closeWindow(index) {\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        const { contexts } = this;\r\n        const context = contexts[index];\r\n        const { window, subscription } = context;\r\n        contexts.splice(index, 1);\r\n        window.complete();\r\n        subscription.unsubscribe();\r\n    }\r\n}\r\n//# sourceMappingURL=windowToggle.js.map"]},"metadata":{},"sourceType":"module"}