{"ast":null,"code":"import _inherits from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/lgrubisic/Documents/projects/employee-time-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, Optional, ElementRef, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c2 = [\"*\"];\nvar MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent'\n  };\n} // Increasing integer for generating unique ids for radio components.\n\n\nvar nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\n\nvar MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatRadioGroup;\n  }),\n  multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\n\nvar MatRadioChange = function MatRadioChange(\n/** The MatRadioButton that emits the change event. */\nsource,\n/** The value of the MatRadioButton. */\nvalue) {\n  _classCallCheck(this, MatRadioChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\n\n\nvar _MatRadioGroupBase =\n/** @class */\nfunction () {\n  var _MatRadioGroupBase = /*#__PURE__*/function () {\n    function _MatRadioGroupBase(_changeDetector) {\n      _classCallCheck(this, _MatRadioGroupBase);\n\n      this._changeDetector = _changeDetector;\n      /** Selected value for the radio group. */\n\n      this._value = null;\n      /** The HTML name attribute applied to radio buttons in this group. */\n\n      this._name = \"mat-radio-group-\".concat(nextUniqueId++);\n      /** The currently selected radio button. Should match value. */\n\n      this._selected = null;\n      /** Whether the `value` has been set to its initial value. */\n\n      this._isInitialized = false;\n      /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n\n      this._labelPosition = 'after';\n      /** Whether the radio group is disabled. */\n\n      this._disabled = false;\n      /** Whether the radio group is required. */\n\n      this._required = false;\n      /** The method to be called in order to update ngModel */\n\n      this._controlValueAccessorChangeFn = function () {};\n      /**\n       * onTouch function registered via registerOnTouch (ControlValueAccessor).\n       * @docs-private\n       */\n\n\n      this.onTouched = function () {};\n      /**\n       * Event emitted when the group value changes.\n       * Change events are only emitted when the value changes due to user interaction with\n       * a radio button (the same behavior as `<input type-\"radio\">`).\n       */\n\n\n      this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n\n\n    _createClass(_MatRadioGroupBase, [{\n      key: \"_checkSelectedRadioButton\",\n      value: function _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n          this._selected.checked = true;\n        }\n      }\n      /**\n       * The currently selected radio button. If set to a new radio button, the radio group value\n       * will be updated to match the new selected button.\n       */\n\n    }, {\n      key: \"ngAfterContentInit\",\n\n      /**\n       * Initialize properties once content children are available.\n       * This allows us to propagate relevant attributes to associated buttons.\n       */\n      value: function ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n      }\n      /**\n       * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n       * radio buttons upon their blur.\n       */\n\n    }, {\n      key: \"_touch\",\n      value: function _touch() {\n        if (this.onTouched) {\n          this.onTouched();\n        }\n      }\n    }, {\n      key: \"_updateRadioButtonNames\",\n      value: function _updateRadioButtonNames() {\n        var _this = this;\n\n        if (this._radios) {\n          this._radios.forEach(function (radio) {\n            radio.name = _this.name;\n\n            radio._markForCheck();\n          });\n        }\n      }\n      /** Updates the `selected` radio button from the internal _value state. */\n\n    }, {\n      key: \"_updateSelectedRadioFromValue\",\n      value: function _updateSelectedRadioFromValue() {\n        var _this2 = this;\n\n        // If the value already matches the selected radio, do nothing.\n        var isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios && !isAlreadySelected) {\n          this._selected = null;\n\n          this._radios.forEach(function (radio) {\n            radio.checked = _this2.value === radio.value;\n\n            if (radio.checked) {\n              _this2._selected = radio;\n            }\n          });\n        }\n      }\n      /** Dispatch change event with current selection and group value. */\n\n    }, {\n      key: \"_emitChangeEvent\",\n      value: function _emitChangeEvent() {\n        if (this._isInitialized) {\n          this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n      }\n    }, {\n      key: \"_markRadiosForCheck\",\n      value: function _markRadiosForCheck() {\n        if (this._radios) {\n          this._radios.forEach(function (radio) {\n            return radio._markForCheck();\n          });\n        }\n      }\n      /**\n       * Sets the model value. Implemented as part of ControlValueAccessor.\n       * @param value\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n\n        this._changeDetector.markForCheck();\n      }\n      /**\n       * Registers a callback to be triggered when the model value changes.\n       * Implemented as part of ControlValueAccessor.\n       * @param fn Callback to be registered.\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n      }\n      /**\n       * Registers a callback to be triggered when the control is touched.\n       * Implemented as part of ControlValueAccessor.\n       * @param fn Callback to be registered.\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n       * @param isDisabled Whether the control should be disabled.\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n\n        this._changeDetector.markForCheck();\n      }\n    }, {\n      key: \"name\",\n      get: function get() {\n        return this._name;\n      },\n      set: function set(value) {\n        this._name = value;\n\n        this._updateRadioButtonNames();\n      }\n      /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n\n    }, {\n      key: \"labelPosition\",\n      get: function get() {\n        return this._labelPosition;\n      },\n      set: function set(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n\n        this._markRadiosForCheck();\n      }\n      /**\n       * Value for the radio-group. Should equal the value of the selected radio button if there is\n       * a corresponding radio button with a matching value. If there is not such a corresponding\n       * radio button, this value persists to be applied in case a new radio button is added with a\n       * matching value.\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(newValue) {\n        if (this._value !== newValue) {\n          // Set this before proceeding to ensure no circular loop occurs with selection.\n          this._value = newValue;\n\n          this._updateSelectedRadioFromValue();\n\n          this._checkSelectedRadioButton();\n        }\n      }\n    }, {\n      key: \"selected\",\n      get: function get() {\n        return this._selected;\n      },\n      set: function set(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n\n        this._checkSelectedRadioButton();\n      }\n      /** Whether the radio group is disabled */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n\n        this._markRadiosForCheck();\n      }\n      /** Whether the radio group is required */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        return this._required;\n      },\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n\n        this._markRadiosForCheck();\n      }\n    }]);\n\n    return _MatRadioGroupBase;\n  }();\n\n  _MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) {\n    return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  _MatRadioGroupBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: _MatRadioGroupBase,\n    inputs: {\n      name: \"name\",\n      labelPosition: \"labelPosition\",\n      value: \"value\",\n      selected: \"selected\",\n      disabled: \"disabled\",\n      required: \"required\",\n      color: \"color\"\n    },\n    outputs: {\n      change: \"change\"\n    }\n  });\n\n  _MatRadioGroupBase.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }];\n  };\n\n  _MatRadioGroupBase.propDecorators = {\n    change: [{\n      type: Output\n    }],\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ChangeDetectorRef\n      }];\n    }, {\n      change: [{\n        type: Output\n      }],\n      name: [{\n        type: Input\n      }],\n      labelPosition: [{\n        type: Input\n      }],\n      value: [{\n        type: Input\n      }],\n      selected: [{\n        type: Input\n      }],\n      disabled: [{\n        type: Input\n      }],\n      required: [{\n        type: Input\n      }],\n      color: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return _MatRadioGroupBase;\n}();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n\n\nvar MatRadioGroup =\n/** @class */\nfunction () {\n  var MatRadioGroup = /*#__PURE__*/function (_MatRadioGroupBase2) {\n    _inherits(MatRadioGroup, _MatRadioGroupBase2);\n\n    var _super = _createSuper(MatRadioGroup);\n\n    function MatRadioGroup() {\n      _classCallCheck(this, MatRadioGroup);\n\n      return _super.apply(this, arguments);\n    }\n\n    return MatRadioGroup;\n  }(_MatRadioGroupBase);\n\n  MatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) {\n    return ɵMatRadioGroup_BaseFactory(t || MatRadioGroup);\n  };\n\n  MatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: MatRadioGroup,\n    selectors: [[\"mat-radio-group\"]],\n    contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"],\n    exportAs: [\"matRadioGroup\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  MatRadioGroup.propDecorators = {\n    _radios: [{\n      type: ContentChildren,\n      args: [forwardRef(function () {\n        return MatRadioButton;\n      }), {\n        descendants: true\n      }]\n    }]\n  };\n  var ɵMatRadioGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n      type: Directive,\n      args: [{\n        selector: 'mat-radio-group',\n        exportAs: 'matRadioGroup',\n        providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n        host: {\n          'role': 'radiogroup',\n          'class': 'mat-radio-group'\n        }\n      }]\n    }], null, {\n      _radios: [{\n        type: ContentChildren,\n        args: [forwardRef(function () {\n          return MatRadioButton;\n        }), {\n          descendants: true\n        }]\n      }]\n    });\n  })();\n\n  return MatRadioGroup;\n}(); // Boilerplate for applying mixins to MatRadioButton.\n\n/** @docs-private */\n\n\nvar MatRadioButtonBase = function MatRadioButtonBase(_elementRef) {\n  _classCallCheck(this, MatRadioButtonBase);\n\n  this._elementRef = _elementRef;\n}; // As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n\n\nvar _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\n\n\nvar _MatRadioButtonBase =\n/** @class */\nfunction () {\n  var _MatRadioButtonBase = /*#__PURE__*/function (_MatRadioButtonMixinB) {\n    _inherits(_MatRadioButtonBase, _MatRadioButtonMixinB);\n\n    var _super2 = _createSuper(_MatRadioButtonBase);\n\n    function _MatRadioButtonBase(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n      var _this3;\n\n      _classCallCheck(this, _MatRadioButtonBase);\n\n      _this3 = _super2.call(this, elementRef);\n      _this3._changeDetector = _changeDetector;\n      _this3._focusMonitor = _focusMonitor;\n      _this3._radioDispatcher = _radioDispatcher;\n      _this3._animationMode = _animationMode;\n      _this3._providerOverride = _providerOverride;\n      _this3._uniqueId = \"mat-radio-\".concat(++nextUniqueId);\n      /** The unique ID for the radio button. */\n\n      _this3.id = _this3._uniqueId;\n      /**\n       * Event emitted when the checked state of this radio button changes.\n       * Change events are only emitted when the value changes due to user interaction with\n       * the radio button (the same behavior as `<input type-\"radio\">`).\n       */\n\n      _this3.change = new EventEmitter();\n      /** Whether this radio is checked. */\n\n      _this3._checked = false;\n      /** Value assigned to this radio. */\n\n      _this3._value = null;\n      /** Unregister function for _radioDispatcher */\n\n      _this3._removeUniqueSelectionListener = function () {}; // Assertions. Ideally these should be stripped out by the compiler.\n      // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n\n      _this3.radioGroup = radioGroup;\n      _this3._removeUniqueSelectionListener = _radioDispatcher.listen(function (id, name) {\n        if (id !== _this3.id && name === _this3.name) {\n          _this3.checked = false;\n        }\n      });\n      return _this3;\n    }\n    /** Whether this radio button is checked. */\n\n\n    _createClass(_MatRadioButtonBase, [{\n      key: \"focus\",\n\n      /** Focuses the radio button. */\n      value: function focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n      }\n      /**\n       * Marks the radio button as needing checking for change detection.\n       * This method is exposed because the parent radio group will directly\n       * update bound properties of the radio button.\n       */\n\n    }, {\n      key: \"_markForCheck\",\n      value: function _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this.radioGroup) {\n          // If the radio is inside a radio group, determine if it should be checked\n          this.checked = this.radioGroup.value === this._value; // Copy name from parent radio group\n\n          this.name = this.radioGroup.name;\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this4 = this;\n\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(function (focusOrigin) {\n          if (!focusOrigin && _this4.radioGroup) {\n            _this4.radioGroup._touch();\n          }\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n\n        this._removeUniqueSelectionListener();\n      }\n      /** Dispatch change event with current value. */\n\n    }, {\n      key: \"_emitChangeEvent\",\n      value: function _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n      }\n    }, {\n      key: \"_isRippleDisabled\",\n      value: function _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n      }\n    }, {\n      key: \"_onInputClick\",\n      value: function _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n      }\n      /**\n       * Triggered when the radio button received a click or the input recognized any change.\n       * Clicking on a label element, will trigger a change event on the associated input.\n       */\n\n    }, {\n      key: \"_onInputChange\",\n      value: function _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        var groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n\n        this._emitChangeEvent();\n\n        if (this.radioGroup) {\n          this.radioGroup._controlValueAccessorChangeFn(this.value);\n\n          if (groupValueChanged) {\n            this.radioGroup._emitChangeEvent();\n          }\n        }\n      }\n      /** Sets the disabled state and marks for check if a change occurred. */\n\n    }, {\n      key: \"_setDisabled\",\n      value: function _setDisabled(value) {\n        if (this._disabled !== value) {\n          this._disabled = value;\n\n          this._changeDetector.markForCheck();\n        }\n      }\n    }, {\n      key: \"checked\",\n      get: function get() {\n        return this._checked;\n      },\n      set: function set(value) {\n        var newCheckedState = coerceBooleanProperty(value);\n\n        if (this._checked !== newCheckedState) {\n          this._checked = newCheckedState;\n\n          if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n            this.radioGroup.selected = this;\n          } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n            // When unchecking the selected radio button, update the selected radio\n            // property on the group.\n            this.radioGroup.selected = null;\n          }\n\n          if (newCheckedState) {\n            // Notify all radio buttons with the same name to un-check.\n            this._radioDispatcher.notify(this.id, this.name);\n          }\n\n          this._changeDetector.markForCheck();\n        }\n      }\n      /** The value of this radio button. */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(value) {\n        if (this._value !== value) {\n          this._value = value;\n\n          if (this.radioGroup !== null) {\n            if (!this.checked) {\n              // Update checked when the value changed to match the radio group's value\n              this.checked = this.radioGroup.value === value;\n            }\n\n            if (this.checked) {\n              this.radioGroup.selected = this;\n            }\n          }\n        }\n      }\n      /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n\n    }, {\n      key: \"labelPosition\",\n      get: function get() {\n        return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n      },\n      set: function set(value) {\n        this._labelPosition = value;\n      }\n      /** Whether the radio button is disabled. */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n      },\n      set: function set(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n      }\n      /** Whether the radio button is required. */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        return this._required || this.radioGroup && this.radioGroup.required;\n      },\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n      }\n      /** Theme color of the radio button. */\n\n    }, {\n      key: \"color\",\n      get: function get() {\n        return this._color || this.radioGroup && this.radioGroup.color || this._providerOverride && this._providerOverride.color || 'accent';\n      },\n      set: function set(newValue) {\n        this._color = newValue;\n      }\n      /** ID of the native input element inside `<mat-radio-button>` */\n\n    }, {\n      key: \"inputId\",\n      get: function get() {\n        return \"\".concat(this.id || this._uniqueId, \"-input\");\n      }\n    }]);\n\n    return _MatRadioButtonBase;\n  }(_MatRadioButtonMixinBase);\n\n  _MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) {\n    return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8));\n  };\n\n  _MatRadioButtonBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: _MatRadioButtonBase,\n    viewQuery: function _MatRadioButtonBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      checked: \"checked\",\n      value: \"value\",\n      labelPosition: \"labelPosition\",\n      disabled: \"disabled\",\n      required: \"required\",\n      color: \"color\",\n      name: \"name\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n    },\n    outputs: {\n      change: \"change\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  _MatRadioButtonBase.ctorParameters = function () {\n    return [{\n      type: _MatRadioGroupBase,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ElementRef\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: FocusMonitor\n    }, {\n      type: UniqueSelectionDispatcher\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RADIO_DEFAULT_OPTIONS]\n      }]\n    }];\n  };\n\n  _MatRadioButtonBase.propDecorators = {\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    checked: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: _MatRadioGroupBase,\n        decorators: [{\n          type: Optional\n        }]\n      }, {\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc0.ChangeDetectorRef\n      }, {\n        type: ɵngcc1.FocusMonitor\n      }, {\n        type: ɵngcc2.UniqueSelectionDispatcher\n      }, {\n        type: String,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [ANIMATION_MODULE_TYPE]\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [MAT_RADIO_DEFAULT_OPTIONS]\n        }]\n      }];\n    }, {\n      id: [{\n        type: Input\n      }],\n      change: [{\n        type: Output\n      }],\n      checked: [{\n        type: Input\n      }],\n      value: [{\n        type: Input\n      }],\n      labelPosition: [{\n        type: Input\n      }],\n      disabled: [{\n        type: Input\n      }],\n      required: [{\n        type: Input\n      }],\n      color: [{\n        type: Input\n      }],\n      name: [{\n        type: Input\n      }],\n      ariaLabel: [{\n        type: Input,\n        args: ['aria-label']\n      }],\n      ariaLabelledby: [{\n        type: Input,\n        args: ['aria-labelledby']\n      }],\n      ariaDescribedby: [{\n        type: Input,\n        args: ['aria-describedby']\n      }],\n      _inputElement: [{\n        type: ViewChild,\n        args: ['input']\n      }]\n    });\n  })();\n\n  return _MatRadioButtonBase;\n}();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n\n\nvar MatRadioButton =\n/** @class */\nfunction () {\n  var MatRadioButton = /*#__PURE__*/function (_MatRadioButtonBase2) {\n    _inherits(MatRadioButton, _MatRadioButtonBase2);\n\n    var _super3 = _createSuper(MatRadioButton);\n\n    function MatRadioButton(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride) {\n      _classCallCheck(this, MatRadioButton);\n\n      return _super3.call(this, radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride);\n    }\n\n    return MatRadioButton;\n  }(_MatRadioButtonBase);\n\n  MatRadioButton.ɵfac = function MatRadioButton_Factory(t) {\n    return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MatRadioGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8));\n  };\n\n  MatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: MatRadioButton,\n    selectors: [[\"mat-radio-button\"]],\n    hostAttrs: [1, \"mat-radio-button\"],\n    hostVars: 17,\n    hostBindings: function MatRadioButton_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() {\n          return ctx._inputElement.nativeElement.focus();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n      }\n    },\n    inputs: {\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matRadioButton\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c2,\n    decls: 13,\n    vars: 19,\n    consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]],\n    template: function MatRadioButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) {\n          return ctx._onInputChange($event);\n        })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) {\n          return ctx._onInputClick($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\xA0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        var _r0 = ɵngcc0.ɵɵreference(1);\n\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n      }\n    },\n    directives: [ɵngcc3.MatRipple],\n    styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  MatRadioButton.ctorParameters = function () {\n    return [{\n      type: MatRadioGroup,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ElementRef\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: FocusMonitor\n    }, {\n      type: UniqueSelectionDispatcher\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RADIO_DEFAULT_OPTIONS]\n      }]\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n      type: Component,\n      args: [{\n        selector: 'mat-radio-button',\n        template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <div class=\\\"mat-radio-container\\\">\\n    <div class=\\\"mat-radio-outer-circle\\\"></div>\\n    <div class=\\\"mat-radio-inner-circle\\\"></div>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n\\n  <!-- The label content for radio control. -->\\n  <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </div>\\n</label>\\n\",\n        inputs: ['disableRipple', 'tabIndex'],\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'matRadioButton',\n        host: {\n          'class': 'mat-radio-button',\n          '[class.mat-radio-checked]': 'checked',\n          '[class.mat-radio-disabled]': 'disabled',\n          '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n          '[class.mat-primary]': 'color === \"primary\"',\n          '[class.mat-accent]': 'color === \"accent\"',\n          '[class.mat-warn]': 'color === \"warn\"',\n          // Needs to be -1 so the `focus` event still fires.\n          '[attr.tabindex]': '-1',\n          '[attr.id]': 'id',\n          '[attr.aria-label]': 'null',\n          '[attr.aria-labelledby]': 'null',\n          '[attr.aria-describedby]': 'null',\n          // Note: under normal conditions focus shouldn't land on this element, however it may be\n          // programmatically set, for example inside of a focus trap, in this case we want to forward\n          // the focus to the native element.\n          '(focus)': '_inputElement.nativeElement.focus()'\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n      }]\n    }], function () {\n      return [{\n        type: MatRadioGroup,\n        decorators: [{\n          type: Optional\n        }]\n      }, {\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc0.ChangeDetectorRef\n      }, {\n        type: ɵngcc1.FocusMonitor\n      }, {\n        type: ɵngcc2.UniqueSelectionDispatcher\n      }, {\n        type: String,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [ANIMATION_MODULE_TYPE]\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [MAT_RADIO_DEFAULT_OPTIONS]\n        }]\n      }];\n    }, null);\n  })();\n\n  return MatRadioButton;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatRadioModule =\n/** @class */\nfunction () {\n  var MatRadioModule = function MatRadioModule() {\n    _classCallCheck(this, MatRadioModule);\n  };\n\n  MatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: MatRadioModule\n  });\n  MatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function MatRadioModule_Factory(t) {\n      return new (t || MatRadioModule)();\n    },\n    imports: [[MatRippleModule, MatCommonModule], MatCommonModule]\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, {\n      declarations: function declarations() {\n        return [MatRadioGroup, MatRadioButton];\n      },\n      imports: function imports() {\n        return [MatRippleModule, MatCommonModule];\n      },\n      exports: function exports() {\n        return [MatRadioGroup, MatRadioButton, MatCommonModule];\n      }\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n      type: NgModule,\n      args: [{\n        imports: [MatRippleModule, MatCommonModule],\n        exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n        declarations: [MatRadioGroup, MatRadioButton]\n      }]\n    }], null, null);\n  })();\n\n  return MatRadioModule;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };","map":{"version":3,"sources":["../../../../../../src/material/radio/radio.ts","../../../../../../src/material/radio/radio-module.ts","../../../../../../src/material/radio/public-api.ts","../../../../../../src/material/radio/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: _MatRadioButtonBase,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\n@Directive()\n// tslint:disable-next-line:class-name\nexport abstract class _MatRadioGroupBase<T extends _MatRadioButtonBase> implements AfterContentInit,\n  ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: T | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  abstract _radios: QueryList<T>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: T | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup extends _MatRadioGroupBase<MatRadioButton> {\n  @ContentChildren(forwardRef(() => MatRadioButton), {descendants: true})\n  _radios: QueryList<MatRadioButton>;\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\n@Directive()\n// tslint:disable-next-line:class-name\nexport abstract class _MatRadioButtonBase extends _MatRadioButtonMixinBase implements OnInit,\n  AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._setDisabled(coerceBooleanProperty(value));\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: _MatRadioGroupBase<_MatRadioButtonBase>;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: _MatRadioGroupBase<_MatRadioButtonBase>,\n              elementRef: ElementRef,\n              protected _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Sets the disabled state and marks for check if a change occurred. */\n  protected _setDisabled(value: boolean) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonBase {\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              changeDetector: ChangeDetectorRef,\n              focusMonitor: FocusMonitor,\n              radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                  providerOverride?: MatRadioDefaultOptions) {\n    super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher,\n          animationMode, providerOverride);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './radio-module';\nexport * from './radio';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}