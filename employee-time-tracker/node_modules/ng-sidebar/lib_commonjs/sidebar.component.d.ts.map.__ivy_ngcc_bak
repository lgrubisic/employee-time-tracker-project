{"version":3,"file":"sidebar.component.d.ts","sources":["sidebar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { SidebarContainer } from './sidebar-container.component';\nexport declare class Sidebar implements AfterContentInit, OnInit, OnChanges, OnDestroy {\n    private _container;\n    private _ref;\n    opened: boolean;\n    openedChange: EventEmitter<boolean>;\n    mode: 'over' | 'push' | 'slide';\n    dock: boolean;\n    dockedSize: string;\n    position: 'start' | 'end' | 'left' | 'right' | 'top' | 'bottom';\n    animate: boolean;\n    autoCollapseHeight: number;\n    autoCollapseWidth: number;\n    autoCollapseOnInit: boolean;\n    sidebarClass: string;\n    ariaLabel: string;\n    trapFocus: boolean;\n    autoFocus: boolean;\n    showBackdrop: boolean;\n    closeOnClickBackdrop: boolean;\n    closeOnClickOutside: boolean;\n    keyClose: boolean;\n    keyCode: number;\n    onContentInit: EventEmitter<null>;\n    onOpenStart: EventEmitter<null>;\n    onOpened: EventEmitter<null>;\n    onCloseStart: EventEmitter<null>;\n    onClosed: EventEmitter<null>;\n    onTransitionEnd: EventEmitter<null>;\n    onModeChange: EventEmitter<string>;\n    onPositionChange: EventEmitter<string>;\n    _onRerender: EventEmitter<null>;\n    _elSidebar: ElementRef;\n    private _focusableElementsString;\n    private _focusableElements;\n    private _focusedBeforeOpen;\n    private _tabIndexAttr;\n    private _tabIndexIndicatorAttr;\n    private _wasCollapsed;\n    private _shouldAnimate;\n    private _clickEvent;\n    private _onClickOutsideAttached;\n    private _onKeyDownAttached;\n    private _onResizeAttached;\n    private _isBrowser;\n    constructor(_container: SidebarContainer, _ref: ChangeDetectorRef, platformId: Object);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    open(): void;\n    close(): void;\n    triggerRerender(): void;\n    _getStyle(): CSSStyleDeclaration;\n    _onTransitionEnd(e: TransitionEvent): void;\n    private readonly _shouldTrapFocus;\n    private _focusFirstItem;\n    private _onFocusTrap;\n    private _setFocused;\n    private _initCloseListeners;\n    private _initCloseClickListener;\n    private _initCloseKeyDownListener;\n    private _destroyCloseListeners;\n    private _destroyCloseClickListener;\n    private _destroyCloseKeyDownListener;\n    private _onClickOutside;\n    private _onKeyDown;\n    private _initCollapseListeners;\n    private _destroyCollapseListeners;\n    private _collapse;\n    readonly _height: number;\n    readonly _width: number;\n    readonly _dockedSize: number;\n    readonly _isModeOver: boolean;\n    readonly _isModePush: boolean;\n    readonly _isModeSlide: boolean;\n    readonly _isDocked: boolean;\n    readonly _isLeftOrTop: boolean;\n    readonly _isLeftOrRight: boolean;\n    readonly _isInert: boolean;\n    private _normalizePosition;\n}\n"]}